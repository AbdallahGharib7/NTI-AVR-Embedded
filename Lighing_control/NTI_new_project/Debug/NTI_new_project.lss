
NTI_new_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001380  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  00800060  00001380  00001414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800128  00800128  000014dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000150c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004672  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010a4  00000000  00000000  00005fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002456  00000000  00000000  00007086  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c90  00000000  00000000  000094dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001456  00000000  00000000  0000a16c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c72  00000000  00000000  0000b5c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b0  00000000  00000000  0000e234  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__vector_1>
       8:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__vector_2>
       c:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__vector_3>
      10:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__vector_4>
      14:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__vector_5>
      18:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__vector_6>
      1c:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__vector_7>
      20:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__vector_8>
      24:	0c 94 4e 08 	jmp	0x109c	; 0x109c <__vector_9>
      28:	0c 94 25 08 	jmp	0x104a	; 0x104a <__vector_10>
      2c:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__vector_11>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__vector_15>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	a3 07       	cpc	r26, r19
      56:	ad 07       	cpc	r26, r29
      58:	b7 07       	cpc	r27, r23
      5a:	c1 07       	cpc	r28, r17
      5c:	cb 07       	cpc	r28, r27
      5e:	d5 07       	cpc	r29, r21
      60:	df 07       	cpc	r29, r31
      62:	e9 07       	cpc	r30, r25

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 e8       	ldi	r30, 0x80	; 128
      78:	f3 e1       	ldi	r31, 0x13	; 19
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a8 32       	cpi	r26, 0x28	; 40
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	21 e0       	ldi	r18, 0x01	; 1
      88:	a8 e2       	ldi	r26, 0x28	; 40
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	ae 34       	cpi	r26, 0x4E	; 78
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 54 04 	call	0x8a8	; 0x8a8 <main>
      9a:	0c 94 be 09 	jmp	0x137c	; 0x137c <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <motor_state>:
	
	
}

void motor_state(MOTOR_MODES mode)
{
      a2:	cf 93       	push	r28
      a4:	c8 2f       	mov	r28, r24
	//pwm 100%
	DIO_vSetPinMode(MOTOR_EN,OUTPUT_HIGH);
      a6:	61 e0       	ldi	r22, 0x01	; 1
      a8:	8b e0       	ldi	r24, 0x0B	; 11
      aa:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	
	switch(mode)
      ae:	c1 30       	cpi	r28, 0x01	; 1
      b0:	89 f0       	breq	.+34     	; 0xd4 <motor_state+0x32>
      b2:	18 f0       	brcs	.+6      	; 0xba <motor_state+0x18>
      b4:	c2 30       	cpi	r28, 0x02	; 2
      b6:	d9 f0       	breq	.+54     	; 0xee <motor_state+0x4c>
      b8:	1e c0       	rjmp	.+60     	; 0xf6 <motor_state+0x54>
	{
		case MOTOR_ON_CW : DIO_vSetPinMode(MOTOR_EN,OUTPUT_HIGH); DIO_vSetPinMode(MOTOR_IN1,OUTPUT_HIGH);DIO_vSetPinMode(MOTOR_IN2,OUTPUT_LOW);break;
      ba:	61 e0       	ldi	r22, 0x01	; 1
      bc:	8b e0       	ldi	r24, 0x0B	; 11
      be:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
      c2:	61 e0       	ldi	r22, 0x01	; 1
      c4:	8d e0       	ldi	r24, 0x0D	; 13
      c6:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	8e e0       	ldi	r24, 0x0E	; 14
      ce:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
      d2:	11 c0       	rjmp	.+34     	; 0xf6 <motor_state+0x54>
		case MOTOR_ON_CCW: DIO_vSetPinMode(MOTOR_EN,OUTPUT_HIGH); DIO_vSetPinMode(MOTOR_IN2,OUTPUT_HIGH);DIO_vSetPinMode(MOTOR_IN1,OUTPUT_LOW);break;
      d4:	61 e0       	ldi	r22, 0x01	; 1
      d6:	8b e0       	ldi	r24, 0x0B	; 11
      d8:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
      dc:	61 e0       	ldi	r22, 0x01	; 1
      de:	8e e0       	ldi	r24, 0x0E	; 14
      e0:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	8d e0       	ldi	r24, 0x0D	; 13
      e8:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
      ec:	04 c0       	rjmp	.+8      	; 0xf6 <motor_state+0x54>
		case MOTOR_OFF   : DIO_vSetPinMode(MOTOR_EN,OUTPUT_LOW);  break;
      ee:	60 e0       	ldi	r22, 0x00	; 0
      f0:	8b e0       	ldi	r24, 0x0B	; 11
      f2:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	}
}
      f6:	cf 91       	pop	r28
      f8:	08 95       	ret

000000fa <Keypad_Init>:
u8	arr_col[COL]={COL1,COL2,COL3,COL4};
extern u8 arr_keypad[ROW][COL];

void Keypad_Init(void)
{
	DIO_vSetPinMode(ROW1,OUTPUT_HIGH);
      fa:	61 e0       	ldi	r22, 0x01	; 1
      fc:	85 e1       	ldi	r24, 0x15	; 21
      fe:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(ROW2,OUTPUT_HIGH);
     102:	61 e0       	ldi	r22, 0x01	; 1
     104:	84 e1       	ldi	r24, 0x14	; 20
     106:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(ROW3,OUTPUT_HIGH);
     10a:	61 e0       	ldi	r22, 0x01	; 1
     10c:	83 e1       	ldi	r24, 0x13	; 19
     10e:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(ROW4,OUTPUT_HIGH);
     112:	61 e0       	ldi	r22, 0x01	; 1
     114:	82 e1       	ldi	r24, 0x12	; 18
     116:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(COL1,INPUT_PULLUP);
     11a:	63 e0       	ldi	r22, 0x03	; 3
     11c:	87 e1       	ldi	r24, 0x17	; 23
     11e:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(COL2,INPUT_PULLUP);
     122:	63 e0       	ldi	r22, 0x03	; 3
     124:	86 e1       	ldi	r24, 0x16	; 22
     126:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(COL3,INPUT_PULLUP);
     12a:	63 e0       	ldi	r22, 0x03	; 3
     12c:	8d e1       	ldi	r24, 0x1D	; 29
     12e:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(COL4,INPUT_PULLUP);
     132:	63 e0       	ldi	r22, 0x03	; 3
     134:	8b e1       	ldi	r24, 0x1B	; 27
     136:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     13a:	08 95       	ret

0000013c <keypad_getkey>:
}

u8 keypad_getkey(void)
{
     13c:	ff 92       	push	r15
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
	u8 key=NO_KEY;
	for(int i=0;i<ROW;i++)
     146:	00 e0       	ldi	r16, 0x00	; 0
     148:	10 e0       	ldi	r17, 0x00	; 0
	DIO_vSetPinMode(COL4,INPUT_PULLUP);
}

u8 keypad_getkey(void)
{
	u8 key=NO_KEY;
     14a:	0f 2e       	mov	r0, r31
     14c:	f4 e5       	ldi	r31, 0x54	; 84
     14e:	ff 2e       	mov	r15, r31
     150:	f0 2d       	mov	r31, r0
	for(int i=0;i<ROW;i++)
     152:	33 c0       	rjmp	.+102    	; 0x1ba <keypad_getkey+0x7e>
	{
		DIO_vSetPinMode(arr_row[i],OUTPUT_LOW);
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	f8 01       	movw	r30, r16
     158:	ec 59       	subi	r30, 0x9C	; 156
     15a:	ff 4f       	sbci	r31, 0xFF	; 255
     15c:	80 81       	ld	r24, Z
     15e:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
		for(int j=0;j<COL;j++)
     162:	c0 e0       	ldi	r28, 0x00	; 0
     164:	d0 e0       	ldi	r29, 0x00	; 0
     166:	1d c0       	rjmp	.+58     	; 0x1a2 <keypad_getkey+0x66>
		{
			if(DIO_u8GetPinValue(arr_col[j])==LOW)
     168:	fe 01       	movw	r30, r28
     16a:	e0 5a       	subi	r30, 0xA0	; 160
     16c:	ff 4f       	sbci	r31, 0xFF	; 255
     16e:	80 81       	ld	r24, Z
     170:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <DIO_u8GetPinValue>
     174:	81 11       	cpse	r24, r1
     176:	14 c0       	rjmp	.+40     	; 0x1a0 <keypad_getkey+0x64>
			{
				key=arr_keypad[i][j];
     178:	f8 01       	movw	r30, r16
     17a:	ee 0f       	add	r30, r30
     17c:	ff 1f       	adc	r31, r31
     17e:	ee 0f       	add	r30, r30
     180:	ff 1f       	adc	r31, r31
     182:	e8 59       	subi	r30, 0x98	; 152
     184:	ff 4f       	sbci	r31, 0xFF	; 255
     186:	ec 0f       	add	r30, r28
     188:	fd 1f       	adc	r31, r29
     18a:	f0 80       	ld	r15, Z
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     18c:	8e e5       	ldi	r24, 0x5E	; 94
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	05 c0       	rjmp	.+10     	; 0x19c <keypad_getkey+0x60>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     192:	e0 e9       	ldi	r30, 0x90	; 144
     194:	f1 e0       	ldi	r31, 0x01	; 1
     196:	31 97       	sbiw	r30, 0x01	; 1
     198:	f1 f7       	brne	.-4      	; 0x196 <keypad_getkey+0x5a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19c:	00 97       	sbiw	r24, 0x00	; 0
     19e:	c9 f7       	brne	.-14     	; 0x192 <keypad_getkey+0x56>
{
	u8 key=NO_KEY;
	for(int i=0;i<ROW;i++)
	{
		DIO_vSetPinMode(arr_row[i],OUTPUT_LOW);
		for(int j=0;j<COL;j++)
     1a0:	21 96       	adiw	r28, 0x01	; 1
     1a2:	c4 30       	cpi	r28, 0x04	; 4
     1a4:	d1 05       	cpc	r29, r1
     1a6:	04 f3       	brlt	.-64     	; 0x168 <keypad_getkey+0x2c>
				_delay_ms(35);
				
			}
			
		}
		DIO_vSetPinMode(arr_row[i],OUTPUT_HIGH);
     1a8:	f8 01       	movw	r30, r16
     1aa:	ec 59       	subi	r30, 0x9C	; 156
     1ac:	ff 4f       	sbci	r31, 0xFF	; 255
     1ae:	61 e0       	ldi	r22, 0x01	; 1
     1b0:	80 81       	ld	r24, Z
     1b2:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
}

u8 keypad_getkey(void)
{
	u8 key=NO_KEY;
	for(int i=0;i<ROW;i++)
     1b6:	0f 5f       	subi	r16, 0xFF	; 255
     1b8:	1f 4f       	sbci	r17, 0xFF	; 255
     1ba:	04 30       	cpi	r16, 0x04	; 4
     1bc:	11 05       	cpc	r17, r1
     1be:	54 f2       	brlt	.-108    	; 0x154 <keypad_getkey+0x18>
			
		}
		DIO_vSetPinMode(arr_row[i],OUTPUT_HIGH);
	}
	return key;
}
     1c0:	8f 2d       	mov	r24, r15
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	08 95       	ret

000001ce <keypad_getkey_No_Wait>:

u8 keypad_getkey_No_Wait(void)
{
     1ce:	ff 92       	push	r15
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
	u8 key=NO_KEY;
	for(int i=0;i<ROW;i++)
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	10 e0       	ldi	r17, 0x00	; 0
	return key;
}

u8 keypad_getkey_No_Wait(void)
{
	u8 key=NO_KEY;
     1dc:	0f 2e       	mov	r0, r31
     1de:	f4 e5       	ldi	r31, 0x54	; 84
     1e0:	ff 2e       	mov	r15, r31
     1e2:	f0 2d       	mov	r31, r0
	for(int i=0;i<ROW;i++)
     1e4:	29 c0       	rjmp	.+82     	; 0x238 <keypad_getkey_No_Wait+0x6a>
	{
		DIO_vSetPinMode(arr_row[i],OUTPUT_LOW);
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	f8 01       	movw	r30, r16
     1ea:	ec 59       	subi	r30, 0x9C	; 156
     1ec:	ff 4f       	sbci	r31, 0xFF	; 255
     1ee:	80 81       	ld	r24, Z
     1f0:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
		for(int j=0;j<COL;j++)
     1f4:	c0 e0       	ldi	r28, 0x00	; 0
     1f6:	d0 e0       	ldi	r29, 0x00	; 0
     1f8:	13 c0       	rjmp	.+38     	; 0x220 <keypad_getkey_No_Wait+0x52>
		{
			if(DIO_u8GetPinValue(arr_col[j])==LOW)
     1fa:	fe 01       	movw	r30, r28
     1fc:	e0 5a       	subi	r30, 0xA0	; 160
     1fe:	ff 4f       	sbci	r31, 0xFF	; 255
     200:	80 81       	ld	r24, Z
     202:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <DIO_u8GetPinValue>
     206:	81 11       	cpse	r24, r1
     208:	0a c0       	rjmp	.+20     	; 0x21e <keypad_getkey_No_Wait+0x50>
			{
				key=arr_keypad[i][j];
     20a:	f8 01       	movw	r30, r16
     20c:	ee 0f       	add	r30, r30
     20e:	ff 1f       	adc	r31, r31
     210:	ee 0f       	add	r30, r30
     212:	ff 1f       	adc	r31, r31
     214:	e8 59       	subi	r30, 0x98	; 152
     216:	ff 4f       	sbci	r31, 0xFF	; 255
     218:	ec 0f       	add	r30, r28
     21a:	fd 1f       	adc	r31, r29
     21c:	f0 80       	ld	r15, Z
{
	u8 key=NO_KEY;
	for(int i=0;i<ROW;i++)
	{
		DIO_vSetPinMode(arr_row[i],OUTPUT_LOW);
		for(int j=0;j<COL;j++)
     21e:	21 96       	adiw	r28, 0x01	; 1
     220:	c4 30       	cpi	r28, 0x04	; 4
     222:	d1 05       	cpc	r29, r1
     224:	54 f3       	brlt	.-44     	; 0x1fa <keypad_getkey_No_Wait+0x2c>
			{
				key=arr_keypad[i][j];
			}
			
		}
		DIO_vSetPinMode(arr_row[i],OUTPUT_HIGH);
     226:	f8 01       	movw	r30, r16
     228:	ec 59       	subi	r30, 0x9C	; 156
     22a:	ff 4f       	sbci	r31, 0xFF	; 255
     22c:	61 e0       	ldi	r22, 0x01	; 1
     22e:	80 81       	ld	r24, Z
     230:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
}

u8 keypad_getkey_No_Wait(void)
{
	u8 key=NO_KEY;
	for(int i=0;i<ROW;i++)
     234:	0f 5f       	subi	r16, 0xFF	; 255
     236:	1f 4f       	sbci	r17, 0xFF	; 255
     238:	04 30       	cpi	r16, 0x04	; 4
     23a:	11 05       	cpc	r17, r1
     23c:	a4 f2       	brlt	.-88     	; 0x1e6 <keypad_getkey_No_Wait+0x18>
			
		}
		DIO_vSetPinMode(arr_row[i],OUTPUT_HIGH);
	}
	return key;
     23e:	8f 2d       	mov	r24, r15
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	1f 91       	pop	r17
     246:	0f 91       	pop	r16
     248:	ff 90       	pop	r15
     24a:	08 95       	ret

0000024c <LCD_WriteIns>:
}



void LCD_WriteIns(u8 ins)
{
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	c8 2f       	mov	r28, r24
	DIO_vSetPinMode(RS,OUTPUT_LOW);
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	83 e0       	ldi	r24, 0x03	; 3
     258:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	//DIO_vSetPinMode(EN,OUTPUT_LOW);
	
	DIO_vSetPinMode(D7,(GET_BIT(ins,7)));
     25c:	6c 2f       	mov	r22, r28
     25e:	66 1f       	adc	r22, r22
     260:	66 27       	eor	r22, r22
     262:	66 1f       	adc	r22, r22
     264:	8c e0       	ldi	r24, 0x0C	; 12
     266:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(D6,(GET_BIT(ins,6)));
     26a:	c6 fb       	bst	r28, 6
     26c:	66 27       	eor	r22, r22
     26e:	60 f9       	bld	r22, 0
     270:	8a e0       	ldi	r24, 0x0A	; 10
     272:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(D5,(GET_BIT(ins,5)));
     276:	c5 fb       	bst	r28, 5
     278:	66 27       	eor	r22, r22
     27a:	60 f9       	bld	r22, 0
     27c:	89 e0       	ldi	r24, 0x09	; 9
     27e:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(D4,(GET_BIT(ins,4)));
     282:	c4 fb       	bst	r28, 4
     284:	66 27       	eor	r22, r22
     286:	60 f9       	bld	r22, 0
     288:	88 e0       	ldi	r24, 0x08	; 8
     28a:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	
	DIO_vSetPinMode(EN,OUTPUT_HIGH);
     28e:	61 e0       	ldi	r22, 0x01	; 1
     290:	82 e0       	ldi	r24, 0x02	; 2
     292:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     296:	00 ea       	ldi	r16, 0xA0	; 160
     298:	1f e0       	ldi	r17, 0x0F	; 15
     29a:	c8 01       	movw	r24, r16
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <LCD_WriteIns+0x50>
	_delay_ms(1);
	DIO_vSetPinMode(EN,OUTPUT_LOW);
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     2a8:	c8 01       	movw	r24, r16
     2aa:	01 97       	sbiw	r24, 0x01	; 1
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCD_WriteIns+0x5e>
	_delay_ms(1);
	
	DIO_vSetPinMode(D7,(GET_BIT(ins,3)));
     2ae:	c3 fb       	bst	r28, 3
     2b0:	66 27       	eor	r22, r22
     2b2:	60 f9       	bld	r22, 0
     2b4:	8c e0       	ldi	r24, 0x0C	; 12
     2b6:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(D6,(GET_BIT(ins,2)));
     2ba:	c2 fb       	bst	r28, 2
     2bc:	66 27       	eor	r22, r22
     2be:	60 f9       	bld	r22, 0
     2c0:	8a e0       	ldi	r24, 0x0A	; 10
     2c2:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(D5,(GET_BIT(ins,1)));
     2c6:	c1 fb       	bst	r28, 1
     2c8:	66 27       	eor	r22, r22
     2ca:	60 f9       	bld	r22, 0
     2cc:	89 e0       	ldi	r24, 0x09	; 9
     2ce:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(D4,(GET_BIT(ins,0)));
     2d2:	6c 2f       	mov	r22, r28
     2d4:	61 70       	andi	r22, 0x01	; 1
     2d6:	88 e0       	ldi	r24, 0x08	; 8
     2d8:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	
	DIO_vSetPinMode(EN,OUTPUT_HIGH);
     2dc:	61 e0       	ldi	r22, 0x01	; 1
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     2e4:	c8 01       	movw	r24, r16
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LCD_WriteIns+0x9a>
	_delay_ms(1);
	DIO_vSetPinMode(EN,OUTPUT_LOW);
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     2f2:	c8 01       	movw	r24, r16
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <LCD_WriteIns+0xa8>
	_delay_ms(1);
}
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	08 95       	ret

00000300 <LCD_Init>:
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     300:	84 ef       	ldi	r24, 0xF4	; 244
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	05 c0       	rjmp	.+10     	; 0x310 <LCD_Init+0x10>
     306:	e0 e9       	ldi	r30, 0x90	; 144
     308:	f1 e0       	ldi	r31, 0x01	; 1
     30a:	31 97       	sbiw	r30, 0x01	; 1
     30c:	f1 f7       	brne	.-4      	; 0x30a <LCD_Init+0xa>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     30e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     310:	00 97       	sbiw	r24, 0x00	; 0
     312:	c9 f7       	brne	.-14     	; 0x306 <LCD_Init+0x6>
// 	DIO_vSetPinMode(D7,OUTPUT_LOW);
// 	DIO_vSetPinMode(RS,OUTPUT_LOW);
	//DIO_vSetPinMode(EN,OUTPUT_HIGH);
	
	_delay_ms(50);
	LCD_WriteIns(0x02);
     314:	82 e0       	ldi	r24, 0x02	; 2
     316:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_WriteIns>
	LCD_WriteIns(0x28);
     31a:	88 e2       	ldi	r24, 0x28	; 40
     31c:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_WriteIns>
	LCD_WriteIns(0x0c);
     320:	8c e0       	ldi	r24, 0x0C	; 12
     322:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_WriteIns>
	LCD_WriteIns(0x01);
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_WriteIns>
     32c:	80 ea       	ldi	r24, 0xA0	; 160
     32e:	9f e0       	ldi	r25, 0x0F	; 15
     330:	01 97       	sbiw	r24, 0x01	; 1
     332:	f1 f7       	brne	.-4      	; 0x330 <LCD_Init+0x30>
	_delay_ms(1);
	LCD_WriteIns(0x06);
     334:	86 e0       	ldi	r24, 0x06	; 6
     336:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_WriteIns>
     33a:	08 95       	ret

0000033c <LCD_goto>:
}


void LCD_goto(u8 line ,u8 cell)
{
	switch(line)
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	31 f0       	breq	.+12     	; 0x34c <LCD_goto+0x10>
     340:	83 30       	cpi	r24, 0x03	; 3
     342:	31 f0       	breq	.+12     	; 0x350 <LCD_goto+0x14>
     344:	81 30       	cpi	r24, 0x01	; 1
     346:	29 f4       	brne	.+10     	; 0x352 <LCD_goto+0x16>
	{
		case 1: cell+=0x40 ;break;
     348:	60 5c       	subi	r22, 0xC0	; 192
     34a:	03 c0       	rjmp	.+6      	; 0x352 <LCD_goto+0x16>
		case 2: cell+=0x14 ;break;
     34c:	6c 5e       	subi	r22, 0xEC	; 236
     34e:	01 c0       	rjmp	.+2      	; 0x352 <LCD_goto+0x16>
		case 3: cell+=0x54 ;break;
     350:	6c 5a       	subi	r22, 0xAC	; 172
		default: break;
	}
	LCD_WriteIns(0x80 | cell);
     352:	86 2f       	mov	r24, r22
     354:	80 68       	ori	r24, 0x80	; 128
     356:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_WriteIns>
     35a:	08 95       	ret

0000035c <LCD_Clear>:
// void LCD_WriteNumber_4D(u16 num);
// void LCD_WriteNumber_Digits(s32 num,u8 digit
/*void LCD_ClearCell(u8 line ,u8 cell,u8 num);*/
void LCD_Clear(void)
{
	LCD_WriteIns(0x01);
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_WriteIns>
     362:	80 e4       	ldi	r24, 0x40	; 64
     364:	9f e1       	ldi	r25, 0x1F	; 31
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	f1 f7       	brne	.-4      	; 0x366 <LCD_Clear+0xa>
     36a:	08 95       	ret

0000036c <LCD_WriteData>:
	_delay_ms(1);
	DIO_vSetPinMode(EN,OUTPUT_LOW);
	_delay_ms(1);
}
void LCD_WriteData(u8 data)
{
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	c8 2f       	mov	r28, r24
	DIO_vSetPinMode(RS,OUTPUT_HIGH);
     374:	61 e0       	ldi	r22, 0x01	; 1
     376:	83 e0       	ldi	r24, 0x03	; 3
     378:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	//DIO_vSetPinMode(EN,OUTPUT_LOW);
	
	DIO_vSetPinMode(D7,(GET_BIT(data,7)));
     37c:	6c 2f       	mov	r22, r28
     37e:	66 1f       	adc	r22, r22
     380:	66 27       	eor	r22, r22
     382:	66 1f       	adc	r22, r22
     384:	8c e0       	ldi	r24, 0x0C	; 12
     386:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(D6,(GET_BIT(data,6)));
     38a:	c6 fb       	bst	r28, 6
     38c:	66 27       	eor	r22, r22
     38e:	60 f9       	bld	r22, 0
     390:	8a e0       	ldi	r24, 0x0A	; 10
     392:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(D5,(GET_BIT(data,5)));
     396:	c5 fb       	bst	r28, 5
     398:	66 27       	eor	r22, r22
     39a:	60 f9       	bld	r22, 0
     39c:	89 e0       	ldi	r24, 0x09	; 9
     39e:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(D4,(GET_BIT(data,4)));
     3a2:	c4 fb       	bst	r28, 4
     3a4:	66 27       	eor	r22, r22
     3a6:	60 f9       	bld	r22, 0
     3a8:	88 e0       	ldi	r24, 0x08	; 8
     3aa:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	
	DIO_vSetPinMode(EN,OUTPUT_HIGH);
     3ae:	61 e0       	ldi	r22, 0x01	; 1
     3b0:	82 e0       	ldi	r24, 0x02	; 2
     3b2:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     3b6:	00 ea       	ldi	r16, 0xA0	; 160
     3b8:	1f e0       	ldi	r17, 0x0F	; 15
     3ba:	c8 01       	movw	r24, r16
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <LCD_WriteData+0x50>
	_delay_ms(1);
	DIO_vSetPinMode(EN,OUTPUT_LOW);
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	82 e0       	ldi	r24, 0x02	; 2
     3c4:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     3c8:	c8 01       	movw	r24, r16
     3ca:	01 97       	sbiw	r24, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCD_WriteData+0x5e>
	_delay_ms(1);
	
	DIO_vSetPinMode(D7,(GET_BIT(data,3)));
     3ce:	c3 fb       	bst	r28, 3
     3d0:	66 27       	eor	r22, r22
     3d2:	60 f9       	bld	r22, 0
     3d4:	8c e0       	ldi	r24, 0x0C	; 12
     3d6:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(D6,(GET_BIT(data,2)));
     3da:	c2 fb       	bst	r28, 2
     3dc:	66 27       	eor	r22, r22
     3de:	60 f9       	bld	r22, 0
     3e0:	8a e0       	ldi	r24, 0x0A	; 10
     3e2:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(D5,(GET_BIT(data,1)));
     3e6:	c1 fb       	bst	r28, 1
     3e8:	66 27       	eor	r22, r22
     3ea:	60 f9       	bld	r22, 0
     3ec:	89 e0       	ldi	r24, 0x09	; 9
     3ee:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	DIO_vSetPinMode(D4,(GET_BIT(data,0)));
     3f2:	6c 2f       	mov	r22, r28
     3f4:	61 70       	andi	r22, 0x01	; 1
     3f6:	88 e0       	ldi	r24, 0x08	; 8
     3f8:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
	
	DIO_vSetPinMode(EN,OUTPUT_HIGH);
     3fc:	61 e0       	ldi	r22, 0x01	; 1
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     404:	c8 01       	movw	r24, r16
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
	_delay_ms(1);
	DIO_vSetPinMode(EN,OUTPUT_LOW);
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     412:	c8 01       	movw	r24, r16
     414:	01 97       	sbiw	r24, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
	_delay_ms(1);
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	08 95       	ret

00000420 <LCD_WriteChar>:



void LCD_WriteChar(u8 ch)
{
	LCD_WriteData(ch);
     420:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_WriteData>
     424:	08 95       	ret

00000426 <LCD_WriteString>:
}
void LCD_WriteString(char *str)
{
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	8c 01       	movw	r16, r24
	u8 i=0;
     42e:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i])
     430:	03 c0       	rjmp	.+6      	; 0x438 <LCD_WriteString+0x12>
	{
		LCD_WriteChar(str[i++]);
     432:	cf 5f       	subi	r28, 0xFF	; 255
     434:	0e 94 10 02 	call	0x420	; 0x420 <LCD_WriteChar>
	LCD_WriteData(ch);
}
void LCD_WriteString(char *str)
{
	u8 i=0;
	while(str[i])
     438:	f8 01       	movw	r30, r16
     43a:	ec 0f       	add	r30, r28
     43c:	f1 1d       	adc	r31, r1
     43e:	80 81       	ld	r24, Z
     440:	81 11       	cpse	r24, r1
     442:	f7 cf       	rjmp	.-18     	; 0x432 <LCD_WriteString+0xc>
	{
		LCD_WriteChar(str[i++]);
	}
}
     444:	cf 91       	pop	r28
     446:	1f 91       	pop	r17
     448:	0f 91       	pop	r16
     44a:	08 95       	ret

0000044c <LED_Init>:
#include "DIO.h"


void LED_Init(led_id_t  led_id)  //7,4,5,6//by default OUTPUT_LOW
{
	switch(led_id)
     44c:	81 30       	cpi	r24, 0x01	; 1
     44e:	59 f0       	breq	.+22     	; 0x466 <LED_Init+0x1a>
     450:	28 f0       	brcs	.+10     	; 0x45c <LED_Init+0x10>
     452:	82 30       	cpi	r24, 0x02	; 2
     454:	69 f0       	breq	.+26     	; 0x470 <LED_Init+0x24>
     456:	83 30       	cpi	r24, 0x03	; 3
     458:	81 f0       	breq	.+32     	; 0x47a <LED_Init+0x2e>
     45a:	08 95       	ret
	{
		case RED_LED:
		DIO_vSetPinMode(PB7,OUTPUT_LOW);
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	8f e0       	ldi	r24, 0x0F	; 15
     460:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
		break;
     464:	08 95       	ret
		
		case GREEN_LED:
		DIO_vSetPinMode(PA4,OUTPUT_LOW);
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	84 e0       	ldi	r24, 0x04	; 4
     46a:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
		break;
     46e:	08 95       	ret
		
		case BLUE_LED:
		DIO_vSetPinMode(PA5,OUTPUT_LOW);
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	85 e0       	ldi	r24, 0x05	; 5
     474:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
		break;
     478:	08 95       	ret
		
		case YELLOW_LED:
		DIO_vSetPinMode(PA6,OUTPUT_LOW);
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	86 e0       	ldi	r24, 0x06	; 6
     47e:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     482:	08 95       	ret

00000484 <LED_setmode>:
}//out

void LED_setmode(led_id_t led_id,led_mode_t  mode)
{
	
	if(mode==HIGH)
     484:	61 30       	cpi	r22, 0x01	; 1
     486:	e1 f4       	brne	.+56     	; 0x4c0 <LED_setmode+0x3c>
	{
		switch(led_id)
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	59 f0       	breq	.+22     	; 0x4a2 <LED_setmode+0x1e>
     48c:	28 f0       	brcs	.+10     	; 0x498 <LED_setmode+0x14>
     48e:	82 30       	cpi	r24, 0x02	; 2
     490:	69 f0       	breq	.+26     	; 0x4ac <LED_setmode+0x28>
     492:	83 30       	cpi	r24, 0x03	; 3
     494:	81 f0       	breq	.+32     	; 0x4b6 <LED_setmode+0x32>
     496:	08 95       	ret
		{
			case RED_LED:
			DIO_vSetPinMode(PB7,OUTPUT_HIGH);
     498:	61 e0       	ldi	r22, 0x01	; 1
     49a:	8f e0       	ldi	r24, 0x0F	; 15
     49c:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
			break;
     4a0:	08 95       	ret
			
			case GREEN_LED:
			DIO_vSetPinMode(PA4,OUTPUT_HIGH);
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	84 e0       	ldi	r24, 0x04	; 4
     4a6:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
			break;
     4aa:	08 95       	ret
			
			case BLUE_LED:
			DIO_vSetPinMode(PA5,OUTPUT_HIGH);
     4ac:	61 e0       	ldi	r22, 0x01	; 1
     4ae:	85 e0       	ldi	r24, 0x05	; 5
     4b0:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
			break;
     4b4:	08 95       	ret
			
			case YELLOW_LED:
			DIO_vSetPinMode(PA6,OUTPUT_HIGH);
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	86 e0       	ldi	r24, 0x06	; 6
     4ba:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
			break;
     4be:	08 95       	ret
		}
		
	}
	else //LOW
	{
		switch(led_id)
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	59 f0       	breq	.+22     	; 0x4da <LED_setmode+0x56>
     4c4:	28 f0       	brcs	.+10     	; 0x4d0 <LED_setmode+0x4c>
     4c6:	82 30       	cpi	r24, 0x02	; 2
     4c8:	69 f0       	breq	.+26     	; 0x4e4 <LED_setmode+0x60>
     4ca:	83 30       	cpi	r24, 0x03	; 3
     4cc:	81 f0       	breq	.+32     	; 0x4ee <LED_setmode+0x6a>
     4ce:	08 95       	ret
		{
			case RED_LED:
			DIO_vSetPinMode(PB7,OUTPUT_LOW);
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	8f e0       	ldi	r24, 0x0F	; 15
     4d4:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
			break;
     4d8:	08 95       	ret
			
			case GREEN_LED:
			DIO_vSetPinMode(PA4,OUTPUT_LOW);
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	84 e0       	ldi	r24, 0x04	; 4
     4de:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
			break;
     4e2:	08 95       	ret
			
			case BLUE_LED:
			DIO_vSetPinMode(PA5,OUTPUT_LOW);
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	85 e0       	ldi	r24, 0x05	; 5
     4e8:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
			break;
     4ec:	08 95       	ret
			
			case YELLOW_LED:
			DIO_vSetPinMode(PA6,OUTPUT_LOW);
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	86 e0       	ldi	r24, 0x06	; 6
     4f2:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     4f6:	08 95       	ret

000004f8 <LED_toggle>:
	}//high,low*/


void LED_toggle(led_id_t led_id)
{
	switch(led_id)
     4f8:	81 30       	cpi	r24, 0x01	; 1
     4fa:	a9 f0       	breq	.+42     	; 0x526 <LED_toggle+0x2e>
     4fc:	28 f0       	brcs	.+10     	; 0x508 <LED_toggle+0x10>
     4fe:	82 30       	cpi	r24, 0x02	; 2
     500:	09 f1       	breq	.+66     	; 0x544 <LED_toggle+0x4c>
     502:	83 30       	cpi	r24, 0x03	; 3
     504:	71 f1       	breq	.+92     	; 0x562 <LED_toggle+0x6a>
     506:	08 95       	ret
	{
		case RED_LED:
		DIO_u8GetPinValue(PB7) ? DIO_vSetPinMode(PB7,OUTPUT_LOW) : DIO_vSetPinMode(PB7,OUTPUT_HIGH);
     508:	8f e0       	ldi	r24, 0x0F	; 15
     50a:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <DIO_u8GetPinValue>
     50e:	88 23       	and	r24, r24
     510:	29 f0       	breq	.+10     	; 0x51c <LED_toggle+0x24>
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	8f e0       	ldi	r24, 0x0F	; 15
     516:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     51a:	08 95       	ret
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	8f e0       	ldi	r24, 0x0F	; 15
     520:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     524:	08 95       	ret
		break;
		
		case GREEN_LED:
		DIO_u8GetPinValue(PA4) ? DIO_vSetPinMode(PA4,OUTPUT_LOW) : DIO_vSetPinMode(PA4,OUTPUT_HIGH);
     526:	84 e0       	ldi	r24, 0x04	; 4
     528:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <DIO_u8GetPinValue>
     52c:	88 23       	and	r24, r24
     52e:	29 f0       	breq	.+10     	; 0x53a <LED_toggle+0x42>
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	84 e0       	ldi	r24, 0x04	; 4
     534:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     538:	08 95       	ret
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	84 e0       	ldi	r24, 0x04	; 4
     53e:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     542:	08 95       	ret
		break;
		
		case BLUE_LED:
		DIO_u8GetPinValue(PA5) ? DIO_vSetPinMode(PA5,OUTPUT_LOW) : DIO_vSetPinMode(PA5,OUTPUT_HIGH);
     544:	85 e0       	ldi	r24, 0x05	; 5
     546:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <DIO_u8GetPinValue>
     54a:	88 23       	and	r24, r24
     54c:	29 f0       	breq	.+10     	; 0x558 <LED_toggle+0x60>
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	85 e0       	ldi	r24, 0x05	; 5
     552:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     556:	08 95       	ret
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	85 e0       	ldi	r24, 0x05	; 5
     55c:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     560:	08 95       	ret
		break;
		
		case YELLOW_LED:
		DIO_u8GetPinValue(PA6) ? DIO_vSetPinMode(PA6,OUTPUT_LOW) : DIO_vSetPinMode(PA6,OUTPUT_HIGH);
     562:	86 e0       	ldi	r24, 0x06	; 6
     564:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <DIO_u8GetPinValue>
     568:	88 23       	and	r24, r24
     56a:	29 f0       	breq	.+10     	; 0x576 <LED_toggle+0x7e>
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	86 e0       	ldi	r24, 0x06	; 6
     570:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     574:	08 95       	ret
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	86 e0       	ldi	r24, 0x06	; 6
     57a:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_vSetPinMode>
     57e:	08 95       	ret

00000580 <timer0_func>:



void timer0_func(void)
{
	timer0_counter++;
     580:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <timer0_counter>
     584:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <timer0_counter+0x1>
     588:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <timer0_counter+0x2>
     58c:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <timer0_counter+0x3>
     590:	01 96       	adiw	r24, 0x01	; 1
     592:	a1 1d       	adc	r26, r1
     594:	b1 1d       	adc	r27, r1
     596:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <timer0_counter>
     59a:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <timer0_counter+0x1>
     59e:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <timer0_counter+0x2>
     5a2:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <timer0_counter+0x3>
	TCNT0=6;
     5a6:	86 e0       	ldi	r24, 0x06	; 6
     5a8:	82 bf       	out	0x32, r24	; 50
		   
	static u8 back_short_flag=0;
	static u8 back_long_flag =0;
	
	
	if(timer0_counter % 1000 == 0) //8000 ov = 1 sec      -> 1000 = 0.125 sec
     5aa:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <timer0_counter>
     5ae:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <timer0_counter+0x1>
     5b2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <timer0_counter+0x2>
     5b6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <timer0_counter+0x3>
     5ba:	28 ee       	ldi	r18, 0xE8	; 232
     5bc:	33 e0       	ldi	r19, 0x03	; 3
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	0e 94 96 09 	call	0x132c	; 0x132c <__udivmodsi4>
     5c6:	67 2b       	or	r22, r23
     5c8:	68 2b       	or	r22, r24
     5ca:	69 2b       	or	r22, r25
     5cc:	09 f0       	breq	.+2      	; 0x5d0 <timer0_func+0x50>
     5ce:	9c c0       	rjmp	.+312    	; 0x708 <timer0_func+0x188>
	{
		switch(press_state_right)
     5d0:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <press_state_right>
     5d4:	81 30       	cpi	r24, 0x01	; 1
     5d6:	79 f0       	breq	.+30     	; 0x5f6 <timer0_func+0x76>
     5d8:	28 f0       	brcs	.+10     	; 0x5e4 <timer0_func+0x64>
     5da:	82 30       	cpi	r24, 0x02	; 2
     5dc:	a9 f0       	breq	.+42     	; 0x608 <timer0_func+0x88>
     5de:	83 30       	cpi	r24, 0x03	; 3
     5e0:	c9 f0       	breq	.+50     	; 0x614 <timer0_func+0x94>
     5e2:	1d c0       	rjmp	.+58     	; 0x61e <timer0_func+0x9e>
		{
			case PRESSED_ONCE : LED_setmode(RIGHT_LED,HIGH); right_short_flag=0; right_long_flag=0 ;break;
     5e4:	61 e0       	ldi	r22, 0x01	; 1
     5e6:	83 e0       	ldi	r24, 0x03	; 3
     5e8:	0e 94 42 02 	call	0x484	; 0x484 <LED_setmode>
     5ec:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <right_short_flag.2320>
     5f0:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <right_long_flag.2321>
     5f4:	14 c0       	rjmp	.+40     	; 0x61e <timer0_func+0x9e>
			case PRESSED_TWICE: LED_setmode(RIGHT_LED,LOW) ; right_short_flag=0; right_long_flag=0 ;break;
     5f6:	60 e0       	ldi	r22, 0x00	; 0
     5f8:	83 e0       	ldi	r24, 0x03	; 3
     5fa:	0e 94 42 02 	call	0x484	; 0x484 <LED_setmode>
     5fe:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <right_short_flag.2320>
     602:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <right_long_flag.2321>
     606:	0b c0       	rjmp	.+22     	; 0x61e <timer0_func+0x9e>
			case SHORT_HOLD   :  right_short_flag=1; right_long_flag=0 ;break;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <right_short_flag.2320>
     60e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <right_long_flag.2321>
     612:	05 c0       	rjmp	.+10     	; 0x61e <timer0_func+0x9e>
			case LONG_HOLD    :  right_short_flag=0; right_long_flag=1 ;break;
     614:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <right_short_flag.2320>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <right_long_flag.2321>
		}
		
		switch(press_state_left)
     61e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <press_state_left>
     622:	81 30       	cpi	r24, 0x01	; 1
     624:	79 f0       	breq	.+30     	; 0x644 <timer0_func+0xc4>
     626:	28 f0       	brcs	.+10     	; 0x632 <timer0_func+0xb2>
     628:	82 30       	cpi	r24, 0x02	; 2
     62a:	a9 f0       	breq	.+42     	; 0x656 <timer0_func+0xd6>
     62c:	83 30       	cpi	r24, 0x03	; 3
     62e:	c9 f0       	breq	.+50     	; 0x662 <timer0_func+0xe2>
     630:	1d c0       	rjmp	.+58     	; 0x66c <timer0_func+0xec>
		{
			case PRESSED_ONCE : LED_setmode(LEFT_LED,HIGH); left_short_flag=0; left_long_flag=0 ;break;
     632:	61 e0       	ldi	r22, 0x01	; 1
     634:	82 e0       	ldi	r24, 0x02	; 2
     636:	0e 94 42 02 	call	0x484	; 0x484 <LED_setmode>
     63a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <left_short_flag.2322>
     63e:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <left_long_flag.2323>
     642:	14 c0       	rjmp	.+40     	; 0x66c <timer0_func+0xec>
			case PRESSED_TWICE: LED_setmode(LEFT_LED,LOW) ; left_short_flag=0; left_long_flag=0 ;break;
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	0e 94 42 02 	call	0x484	; 0x484 <LED_setmode>
     64c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <left_short_flag.2322>
     650:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <left_long_flag.2323>
     654:	0b c0       	rjmp	.+22     	; 0x66c <timer0_func+0xec>
			case SHORT_HOLD   :  left_short_flag=1; left_long_flag=0 ;break;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <left_short_flag.2322>
     65c:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <left_long_flag.2323>
     660:	05 c0       	rjmp	.+10     	; 0x66c <timer0_func+0xec>
			case LONG_HOLD    :  left_short_flag=0; left_long_flag=1 ;break;
     662:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <left_short_flag.2322>
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <left_long_flag.2323>
		}
		
		switch(press_state_front)
     66c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <press_state_front>
     670:	81 30       	cpi	r24, 0x01	; 1
     672:	79 f0       	breq	.+30     	; 0x692 <timer0_func+0x112>
     674:	28 f0       	brcs	.+10     	; 0x680 <timer0_func+0x100>
     676:	82 30       	cpi	r24, 0x02	; 2
     678:	a9 f0       	breq	.+42     	; 0x6a4 <timer0_func+0x124>
     67a:	83 30       	cpi	r24, 0x03	; 3
     67c:	c9 f0       	breq	.+50     	; 0x6b0 <timer0_func+0x130>
     67e:	1d c0       	rjmp	.+58     	; 0x6ba <timer0_func+0x13a>
		{
			case PRESSED_ONCE : LED_setmode(FRONT_LED,HIGH); front_short_flag=0; front_long_flag=0 ;break;
     680:	61 e0       	ldi	r22, 0x01	; 1
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	0e 94 42 02 	call	0x484	; 0x484 <LED_setmode>
     688:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <front_short_flag.2324>
     68c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <front_long_flag.2325>
     690:	14 c0       	rjmp	.+40     	; 0x6ba <timer0_func+0x13a>
			case PRESSED_TWICE: LED_setmode(FRONT_LED,LOW) ; front_short_flag=0; front_long_flag=0 ;break;
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	0e 94 42 02 	call	0x484	; 0x484 <LED_setmode>
     69a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <front_short_flag.2324>
     69e:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <front_long_flag.2325>
     6a2:	0b c0       	rjmp	.+22     	; 0x6ba <timer0_func+0x13a>
			case SHORT_HOLD   :  front_short_flag=1; front_long_flag=0 ;break;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <front_short_flag.2324>
     6aa:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <front_long_flag.2325>
     6ae:	05 c0       	rjmp	.+10     	; 0x6ba <timer0_func+0x13a>
			case LONG_HOLD    :  front_short_flag=0; front_long_flag=1 ;break;
     6b0:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <front_short_flag.2324>
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <front_long_flag.2325>
		}
		
		switch(press_state_back)
     6ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <press_state_back>
     6be:	81 30       	cpi	r24, 0x01	; 1
     6c0:	79 f0       	breq	.+30     	; 0x6e0 <timer0_func+0x160>
     6c2:	28 f0       	brcs	.+10     	; 0x6ce <timer0_func+0x14e>
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	a9 f0       	breq	.+42     	; 0x6f2 <timer0_func+0x172>
     6c8:	83 30       	cpi	r24, 0x03	; 3
     6ca:	c9 f0       	breq	.+50     	; 0x6fe <timer0_func+0x17e>
     6cc:	1d c0       	rjmp	.+58     	; 0x708 <timer0_func+0x188>
		{
			case PRESSED_ONCE : LED_setmode(BACK_LED,HIGH); back_short_flag=0; back_long_flag=0 ;break;
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	0e 94 42 02 	call	0x484	; 0x484 <LED_setmode>
     6d6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <back_short_flag.2326>
     6da:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
     6de:	14 c0       	rjmp	.+40     	; 0x708 <timer0_func+0x188>
			case PRESSED_TWICE: LED_setmode(BACK_LED,LOW) ; back_short_flag=0; back_long_flag=0 ;break;
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	0e 94 42 02 	call	0x484	; 0x484 <LED_setmode>
     6e8:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <back_short_flag.2326>
     6ec:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
     6f0:	0b c0       	rjmp	.+22     	; 0x708 <timer0_func+0x188>
			case SHORT_HOLD   :  back_short_flag=1; back_long_flag=0 ;break;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <back_short_flag.2326>
     6f8:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
     6fc:	05 c0       	rjmp	.+10     	; 0x708 <timer0_func+0x188>
			case LONG_HOLD    :  back_short_flag=0; back_long_flag=1 ;break;
     6fe:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <back_short_flag.2326>
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
		
	}
	
	
	
	if(timer0_counter % 2000 == 0)//each 0.25 sec     //long
     708:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <timer0_counter>
     70c:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <timer0_counter+0x1>
     710:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <timer0_counter+0x2>
     714:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <timer0_counter+0x3>
     718:	20 ed       	ldi	r18, 0xD0	; 208
     71a:	37 e0       	ldi	r19, 0x07	; 7
     71c:	40 e0       	ldi	r20, 0x00	; 0
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	0e 94 96 09 	call	0x132c	; 0x132c <__udivmodsi4>
     724:	67 2b       	or	r22, r23
     726:	68 2b       	or	r22, r24
     728:	69 2b       	or	r22, r25
     72a:	d9 f4       	brne	.+54     	; 0x762 <timer0_func+0x1e2>
	{
		if(right_long_flag == 1)
     72c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <right_long_flag.2321>
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	19 f4       	brne	.+6      	; 0x73a <timer0_func+0x1ba>
		{
			LED_toggle(RIGHT_LED);
     734:	83 e0       	ldi	r24, 0x03	; 3
     736:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_toggle>
		}
		if(left_long_flag == 1)
     73a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <left_long_flag.2323>
     73e:	81 30       	cpi	r24, 0x01	; 1
     740:	19 f4       	brne	.+6      	; 0x748 <timer0_func+0x1c8>
		{
			LED_toggle(LEFT_LED);
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_toggle>
		}
		if(front_long_flag == 1)
     748:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <front_long_flag.2325>
     74c:	81 30       	cpi	r24, 0x01	; 1
     74e:	11 f4       	brne	.+4      	; 0x754 <timer0_func+0x1d4>
		{
			LED_toggle(FRONT_LED);
     750:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_toggle>
		}
		if(back_long_flag == 1)
     754:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     758:	81 30       	cpi	r24, 0x01	; 1
     75a:	19 f4       	brne	.+6      	; 0x762 <timer0_func+0x1e2>
		{
			LED_toggle(BACK_LED);
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_toggle>
	}
	
	
	
	
	if(timer0_counter % 4000 == 0 )//each 0.5 sec     //short
     762:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <timer0_counter>
     766:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <timer0_counter+0x1>
     76a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <timer0_counter+0x2>
     76e:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <timer0_counter+0x3>
     772:	20 ea       	ldi	r18, 0xA0	; 160
     774:	3f e0       	ldi	r19, 0x0F	; 15
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	0e 94 96 09 	call	0x132c	; 0x132c <__udivmodsi4>
     77e:	67 2b       	or	r22, r23
     780:	68 2b       	or	r22, r24
     782:	69 2b       	or	r22, r25
     784:	19 f5       	brne	.+70     	; 0x7cc <timer0_func+0x24c>
	{
		if(right_short_flag == 1)
     786:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <right_short_flag.2320>
     78a:	81 30       	cpi	r24, 0x01	; 1
     78c:	19 f4       	brne	.+6      	; 0x794 <timer0_func+0x214>
		{
			LED_toggle(RIGHT_LED);
     78e:	83 e0       	ldi	r24, 0x03	; 3
     790:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_toggle>
		}
		if(left_short_flag == 1)
     794:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <left_short_flag.2322>
     798:	81 30       	cpi	r24, 0x01	; 1
     79a:	19 f4       	brne	.+6      	; 0x7a2 <timer0_func+0x222>
		{
			LED_toggle(LEFT_LED);
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_toggle>
		}
		if(front_short_flag == 1)
     7a2:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <front_short_flag.2324>
     7a6:	81 30       	cpi	r24, 0x01	; 1
     7a8:	11 f4       	brne	.+4      	; 0x7ae <timer0_func+0x22e>
		{
			LED_toggle(FRONT_LED);
     7aa:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_toggle>
		}
		if(back_short_flag == 1)
     7ae:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <back_short_flag.2326>
     7b2:	81 30       	cpi	r24, 0x01	; 1
     7b4:	19 f4       	brne	.+6      	; 0x7bc <timer0_func+0x23c>
		{
			LED_toggle(BACK_LED);
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LED_toggle>
		}
		
		
		timer0_counter=0;
     7bc:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <timer0_counter>
     7c0:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <timer0_counter+0x1>
     7c4:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <timer0_counter+0x2>
     7c8:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <timer0_counter+0x3>
     7cc:	08 95       	ret

000007ce <password_check>:
}



u8 password_check(void)
{
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	00 d0       	rcall	.+0      	; 0x7d8 <password_check+0xa>
     7d8:	00 d0       	rcall	.+0      	; 0x7da <password_check+0xc>
     7da:	1f 92       	push	r1
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
	u8 right_pass=1;
	u8 counter=0;
	u8 key=NO_KEY;
	u8 temp_pass[5];
	LCD_Clear();
     7e0:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_Clear>
	
	LCD_goto(0,0);
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
	LCD_WriteString("Enter Password ");
     7ec:	84 e9       	ldi	r24, 0x94	; 148
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>


u8 password_check(void)
{
	u8 right_pass=1;
	u8 counter=0;
     7f4:	10 e0       	ldi	r17, 0x00	; 0
	
	LCD_goto(0,0);
	LCD_WriteString("Enter Password ");
	
	
	while(counter<5)
     7f6:	15 c0       	rjmp	.+42     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
	{
		key=keypad_getkey();
     7f8:	0e 94 9e 00 	call	0x13c	; 0x13c <keypad_getkey>
		if(key!=NO_KEY)
     7fc:	84 35       	cpi	r24, 0x54	; 84
     7fe:	89 f0       	breq	.+34     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		{
				temp_pass[counter]=key;
     800:	e1 e0       	ldi	r30, 0x01	; 1
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	ec 0f       	add	r30, r28
     806:	fd 1f       	adc	r31, r29
     808:	e1 0f       	add	r30, r17
     80a:	f1 1d       	adc	r31, r1
     80c:	80 83       	st	Z, r24
				LCD_goto(1,counter++);
     80e:	01 e0       	ldi	r16, 0x01	; 1
     810:	01 0f       	add	r16, r17
     812:	61 2f       	mov	r22, r17
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
				LCD_WriteChar('*');
     81a:	8a e2       	ldi	r24, 0x2A	; 42
     81c:	0e 94 10 02 	call	0x420	; 0x420 <LCD_WriteChar>
	{
		key=keypad_getkey();
		if(key!=NO_KEY)
		{
				temp_pass[counter]=key;
				LCD_goto(1,counter++);
     820:	10 2f       	mov	r17, r16
	
	LCD_goto(0,0);
	LCD_WriteString("Enter Password ");
	
	
	while(counter<5)
     822:	15 30       	cpi	r17, 0x05	; 5
     824:	48 f3       	brcs	.-46     	; 0x7f8 <password_check+0x2a>
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	11 e0       	ldi	r17, 0x01	; 1
     82a:	10 c0       	rjmp	.+32     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
				LCD_WriteChar('*');
		}
	}
	for(u8 i=0;i<5;i++)
	{
		if(temp_pass[i]!=password_arr[i])
     82c:	82 2f       	mov	r24, r18
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	e1 e0       	ldi	r30, 0x01	; 1
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	ec 0f       	add	r30, r28
     836:	fd 1f       	adc	r31, r29
     838:	e8 0f       	add	r30, r24
     83a:	f9 1f       	adc	r31, r25
     83c:	30 81       	ld	r19, Z
     83e:	fc 01       	movw	r30, r24
     840:	ed 5d       	subi	r30, 0xDD	; 221
     842:	fe 4f       	sbci	r31, 0xFE	; 254
     844:	80 81       	ld	r24, Z
     846:	38 13       	cpse	r19, r24
		{
			right_pass=0;
     848:	10 e0       	ldi	r17, 0x00	; 0
				temp_pass[counter]=key;
				LCD_goto(1,counter++);
				LCD_WriteChar('*');
		}
	}
	for(u8 i=0;i<5;i++)
     84a:	2f 5f       	subi	r18, 0xFF	; 255
     84c:	25 30       	cpi	r18, 0x05	; 5
     84e:	70 f3       	brcs	.-36     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
		{
			right_pass=0;
		}
	}
	
	LCD_goto(2,0); 
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	82 e0       	ldi	r24, 0x02	; 2
     854:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
	
	if(right_pass)
     858:	11 23       	and	r17, r17
     85a:	69 f0       	breq	.+26     	; 0x876 <__stack+0x17>
	{
		LCD_WriteString("Right Password");
     85c:	84 ea       	ldi	r24, 0xA4	; 164
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
		LCD_goto(3,0);
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
		LCD_WriteString("Welcome to your car");
     86c:	83 eb       	ldi	r24, 0xB3	; 179
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
     874:	04 c0       	rjmp	.+8      	; 0x87e <__stack+0x1f>

	}
	else
	{
		LCD_WriteString("Wrong Password  !!!");
     876:	87 ec       	ldi	r24, 0xC7	; 199
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     87e:	88 e8       	ldi	r24, 0x88	; 136
     880:	93 e1       	ldi	r25, 0x13	; 19
     882:	05 c0       	rjmp	.+10     	; 0x88e <__stack+0x2f>
     884:	e0 e9       	ldi	r30, 0x90	; 144
     886:	f1 e0       	ldi	r31, 0x01	; 1
     888:	31 97       	sbiw	r30, 0x01	; 1
     88a:	f1 f7       	brne	.-4      	; 0x888 <__stack+0x29>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     88c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     88e:	00 97       	sbiw	r24, 0x00	; 0
     890:	c9 f7       	brne	.-14     	; 0x884 <__stack+0x25>
	}
	_delay_ms(500);
	return right_pass;
	
     892:	81 2f       	mov	r24, r17
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	0f 90       	pop	r0
     89c:	0f 90       	pop	r0
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	08 95       	ret

000008a8 <main>:
	u8 isPressedBefore_back=0;
	u8 key=NO_KEY;
	

	
	Keypad_Init();
     8a8:	0e 94 7d 00 	call	0xfa	; 0xfa <Keypad_Init>
	LCD_Init();
     8ac:	0e 94 80 01 	call	0x300	; 0x300 <LCD_Init>
	TIMER0_Init(TIMER0_NORMAL_MODE,TIMER0_SCALER_8);
     8b0:	62 e0       	ldi	r22, 0x02	; 2
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	0e 94 75 07 	call	0xeea	; 0xeea <TIMER0_Init>
	TIMER0_OVF_InterruptEnable();
     8b8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <TIMER0_OVF_InterruptEnable>
	TIMER0_OVF_SetCallBack(timer0_func);
     8bc:	80 ec       	ldi	r24, 0xC0	; 192
     8be:	92 e0       	ldi	r25, 0x02	; 2
     8c0:	0e 94 f7 07 	call	0xfee	; 0xfee <TIMER0_OVF_SetCallBack>
	GLOBAL_ENABLE();
     8c4:	78 94       	sei
	
	
	LED_Init(BACK_LED);	  //back
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	0e 94 26 02 	call	0x44c	; 0x44c <LED_Init>
	LED_Init(FRONT_LED);  //front
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	0e 94 26 02 	call	0x44c	; 0x44c <LED_Init>
	LED_Init(RIGHT_LED);   //right
     8d2:	83 e0       	ldi	r24, 0x03	; 3
     8d4:	0e 94 26 02 	call	0x44c	; 0x44c <LED_Init>
	LED_Init(LEFT_LED); //left
     8d8:	82 e0       	ldi	r24, 0x02	; 2
     8da:	0e 94 26 02 	call	0x44c	; 0x44c <LED_Init>
	motor_state(MOTOR_OFF);
     8de:	82 e0       	ldi	r24, 0x02	; 2
     8e0:	0e 94 51 00 	call	0xa2	; 0xa2 <motor_state>
		
	
	while(password_check()==0);
     8e4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <password_check>
     8e8:	88 23       	and	r24, r24
     8ea:	e1 f3       	breq	.-8      	; 0x8e4 <main+0x3c>
	LCD_Clear();
     8ec:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_Clear>
	
	LCD_goto(0,0);
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
	LCD_WriteString("RIGHT : OFF");
     8f8:	8b ed       	ldi	r24, 0xDB	; 219
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
	
	LCD_goto(1,0);
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
	LCD_WriteString("LEFT  : OFF");
     908:	87 ee       	ldi	r24, 0xE7	; 231
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
	
	LCD_goto(2,0);
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	82 e0       	ldi	r24, 0x02	; 2
     914:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
	LCD_WriteString("FRONT : OFF");
     918:	83 ef       	ldi	r24, 0xF3	; 243
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
	
	LCD_goto(3,0);
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
	LCD_WriteString("BACK  : OFF");
     928:	8f ef       	ldi	r24, 0xFF	; 255
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
{
	u32 counter=0;
	u8 isPressedBefore_right=0;
	u8 isPressedBefore_left=0;
	u8 isPressedBefore_front=0;
	u8 isPressedBefore_back=0;
     930:	a1 2c       	mov	r10, r1
int main()//_Lighting_control()
{
	u32 counter=0;
	u8 isPressedBefore_right=0;
	u8 isPressedBefore_left=0;
	u8 isPressedBefore_front=0;
     932:	b1 2c       	mov	r11, r1

int main()//_Lighting_control()
{
	u32 counter=0;
	u8 isPressedBefore_right=0;
	u8 isPressedBefore_left=0;
     934:	00 e0       	ldi	r16, 0x00	; 0


int main()//_Lighting_control()
{
	u32 counter=0;
	u8 isPressedBefore_right=0;
     936:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		
		
		counter = 0;
		key=NO_KEY;
     938:	d4 e5       	ldi	r29, 0x54	; 84
	
	while(1)
	{
		
		
		counter = 0;
     93a:	c1 2c       	mov	r12, r1
     93c:	d1 2c       	mov	r13, r1
     93e:	76 01       	movw	r14, r12
		key=NO_KEY;
		
		while(key==NO_KEY)
     940:	4e c0       	rjmp	.+156    	; 0x9de <main+0x136>
		{
			key=keypad_getkey();
     942:	0e 94 9e 00 	call	0x13c	; 0x13c <keypad_getkey>
     946:	c8 2f       	mov	r28, r24
			LCD_goto(0,19);
     948:	63 e1       	ldi	r22, 0x13	; 19
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
			LCD_WriteChar(key);
     950:	8c 2f       	mov	r24, r28
     952:	0e 94 10 02 	call	0x420	; 0x420 <LCD_WriteChar>
			switch(key)
     956:	c7 33       	cpi	r28, 0x37	; 55
     958:	99 f0       	breq	.+38     	; 0x980 <main+0xd8>
     95a:	20 f4       	brcc	.+8      	; 0x964 <main+0xbc>
     95c:	cf 32       	cpi	r28, 0x2F	; 47
     95e:	09 f4       	brne	.+2      	; 0x962 <main+0xba>
     960:	39 c0       	rjmp	.+114    	; 0x9d4 <main+0x12c>
     962:	3d c0       	rjmp	.+122    	; 0x9de <main+0x136>
     964:	c8 33       	cpi	r28, 0x38	; 56
     966:	d1 f0       	breq	.+52     	; 0x99c <main+0xf4>
     968:	c9 33       	cpi	r28, 0x39	; 57
     96a:	31 f1       	breq	.+76     	; 0x9b8 <main+0x110>
     96c:	38 c0       	rjmp	.+112    	; 0x9de <main+0x136>
			{
				case RIGHT_WARNING: while (keypad_getkey_No_Wait()==RIGHT_WARNING){counter++;_delay_ms(1);}  break;
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	c8 1a       	sub	r12, r24
     972:	d8 0a       	sbc	r13, r24
     974:	e8 0a       	sbc	r14, r24
     976:	f8 0a       	sbc	r15, r24
     978:	80 ea       	ldi	r24, 0xA0	; 160
     97a:	9f e0       	ldi	r25, 0x0F	; 15
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	f1 f7       	brne	.-4      	; 0x97c <main+0xd4>
     980:	0e 94 e7 00 	call	0x1ce	; 0x1ce <keypad_getkey_No_Wait>
     984:	87 33       	cpi	r24, 0x37	; 55
     986:	99 f3       	breq	.-26     	; 0x96e <main+0xc6>
     988:	29 c0       	rjmp	.+82     	; 0x9dc <main+0x134>
				case LEFT_WARNING : while (keypad_getkey_No_Wait()==LEFT_WARNING) {counter++;_delay_ms(1);}  break;
     98a:	8f ef       	ldi	r24, 0xFF	; 255
     98c:	c8 1a       	sub	r12, r24
     98e:	d8 0a       	sbc	r13, r24
     990:	e8 0a       	sbc	r14, r24
     992:	f8 0a       	sbc	r15, r24
     994:	80 ea       	ldi	r24, 0xA0	; 160
     996:	9f e0       	ldi	r25, 0x0F	; 15
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	f1 f7       	brne	.-4      	; 0x998 <main+0xf0>
     99c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <keypad_getkey_No_Wait>
     9a0:	88 33       	cpi	r24, 0x38	; 56
     9a2:	99 f3       	breq	.-26     	; 0x98a <main+0xe2>
     9a4:	1b c0       	rjmp	.+54     	; 0x9dc <main+0x134>
				case FRONT_LIGHT  : while (keypad_getkey_No_Wait()==FRONT_LIGHT)  {counter++;_delay_ms(1);}  break;
     9a6:	8f ef       	ldi	r24, 0xFF	; 255
     9a8:	c8 1a       	sub	r12, r24
     9aa:	d8 0a       	sbc	r13, r24
     9ac:	e8 0a       	sbc	r14, r24
     9ae:	f8 0a       	sbc	r15, r24
     9b0:	80 ea       	ldi	r24, 0xA0	; 160
     9b2:	9f e0       	ldi	r25, 0x0F	; 15
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	f1 f7       	brne	.-4      	; 0x9b4 <main+0x10c>
     9b8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <keypad_getkey_No_Wait>
     9bc:	89 33       	cpi	r24, 0x39	; 57
     9be:	99 f3       	breq	.-26     	; 0x9a6 <main+0xfe>
     9c0:	0d c0       	rjmp	.+26     	; 0x9dc <main+0x134>
				case BACK_LIGH    : while (keypad_getkey_No_Wait()==BACK_LIGH)    {counter++;_delay_ms(1);}  break;
     9c2:	8f ef       	ldi	r24, 0xFF	; 255
     9c4:	c8 1a       	sub	r12, r24
     9c6:	d8 0a       	sbc	r13, r24
     9c8:	e8 0a       	sbc	r14, r24
     9ca:	f8 0a       	sbc	r15, r24
     9cc:	80 ea       	ldi	r24, 0xA0	; 160
     9ce:	9f e0       	ldi	r25, 0x0F	; 15
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	f1 f7       	brne	.-4      	; 0x9d0 <main+0x128>
     9d4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <keypad_getkey_No_Wait>
     9d8:	8f 32       	cpi	r24, 0x2F	; 47
     9da:	99 f3       	breq	.-26     	; 0x9c2 <main+0x11a>


int main()//_Lighting_control()
{
	u32 counter=0;
	u8 isPressedBefore_right=0;
     9dc:	dc 2f       	mov	r29, r28
		
		
		counter = 0;
		key=NO_KEY;
		
		while(key==NO_KEY)
     9de:	d4 35       	cpi	r29, 0x54	; 84
     9e0:	09 f4       	brne	.+2      	; 0x9e4 <main+0x13c>
     9e2:	af cf       	rjmp	.-162    	; 0x942 <main+0x9a>
		}
// 		LCD_goto(1,15);
// 		LCD_WriteNumber((s32)counter);
		
		
		if(counter<150)   //normal press   
     9e4:	86 e9       	ldi	r24, 0x96	; 150
     9e6:	c8 16       	cp	r12, r24
     9e8:	d1 04       	cpc	r13, r1
     9ea:	e1 04       	cpc	r14, r1
     9ec:	f1 04       	cpc	r15, r1
     9ee:	08 f0       	brcs	.+2      	; 0x9f2 <main+0x14a>
     9f0:	6e c0       	rjmp	.+220    	; 0xace <main+0x226>
		{
			switch(key)
     9f2:	d7 33       	cpi	r29, 0x37	; 55
     9f4:	51 f0       	breq	.+20     	; 0xa0a <main+0x162>
     9f6:	20 f4       	brcc	.+8      	; 0xa00 <main+0x158>
     9f8:	df 32       	cpi	r29, 0x2F	; 47
     9fa:	09 f4       	brne	.+2      	; 0x9fe <main+0x156>
     9fc:	4f c0       	rjmp	.+158    	; 0xa9c <main+0x1f4>
     9fe:	cd c0       	rjmp	.+410    	; 0xb9a <main+0x2f2>
     a00:	d8 33       	cpi	r29, 0x38	; 56
     a02:	d9 f0       	breq	.+54     	; 0xa3a <main+0x192>
     a04:	d9 33       	cpi	r29, 0x39	; 57
     a06:	89 f1       	breq	.+98     	; 0xa6a <main+0x1c2>
     a08:	c8 c0       	rjmp	.+400    	; 0xb9a <main+0x2f2>
			{
				case RIGHT_WARNING: 
					if(isPressedBefore_right==0 )//
     a0a:	11 11       	cpse	r17, r1
     a0c:	0d c0       	rjmp	.+26     	; 0xa28 <main+0x180>
					{
						if(press_state_right == LONG_HOLD || press_state_right == SHORT_HOLD )
     a0e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <press_state_right>
     a12:	83 30       	cpi	r24, 0x03	; 3
     a14:	21 f0       	breq	.+8      	; 0xa1e <main+0x176>
     a16:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <press_state_right>
     a1a:	82 30       	cpi	r24, 0x02	; 2
     a1c:	09 f4       	brne	.+2      	; 0xa20 <main+0x178>
						{
							isPressedBefore_right++;
     a1e:	1f 5f       	subi	r17, 0xFF	; 255
						}
						press_state_right = PRESSED_ONCE;
     a20:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <press_state_right>
						isPressedBefore_right++;
     a24:	1f 5f       	subi	r17, 0xFF	; 255
     a26:	b9 c0       	rjmp	.+370    	; 0xb9a <main+0x2f2>
						
					}
					else
					{
						if(isPressedBefore_right==1 )
     a28:	11 30       	cpi	r17, 0x01	; 1
     a2a:	11 f4       	brne	.+4      	; 0xa30 <main+0x188>
							{
								isPressedBefore_right++;
     a2c:	1f 5f       	subi	r17, 0xFF	; 255
     a2e:	b5 c0       	rjmp	.+362    	; 0xb9a <main+0x2f2>
							}
						else
							{
								press_state_right = PRESSED_TWICE;
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <press_state_right>
								isPressedBefore_right=0;
     a36:	10 e0       	ldi	r17, 0x00	; 0
     a38:	b0 c0       	rjmp	.+352    	; 0xb9a <main+0x2f2>
							}
					}
					break;
					
				case LEFT_WARNING:
				if(isPressedBefore_left==0)
     a3a:	01 11       	cpse	r16, r1
     a3c:	0d c0       	rjmp	.+26     	; 0xa58 <main+0x1b0>
				{
					if(press_state_left == LONG_HOLD || press_state_left == SHORT_HOLD )
     a3e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <press_state_left>
     a42:	83 30       	cpi	r24, 0x03	; 3
     a44:	21 f0       	breq	.+8      	; 0xa4e <main+0x1a6>
     a46:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <press_state_left>
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	09 f4       	brne	.+2      	; 0xa50 <main+0x1a8>
					{
						isPressedBefore_left++;
     a4e:	0f 5f       	subi	r16, 0xFF	; 255
					}
					press_state_left = PRESSED_ONCE;
     a50:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <press_state_left>
					isPressedBefore_left++;
     a54:	0f 5f       	subi	r16, 0xFF	; 255
     a56:	a1 c0       	rjmp	.+322    	; 0xb9a <main+0x2f2>
				}
				else
				{
					if(isPressedBefore_left==1)
     a58:	01 30       	cpi	r16, 0x01	; 1
     a5a:	11 f4       	brne	.+4      	; 0xa60 <main+0x1b8>
					{
						isPressedBefore_left++;
     a5c:	0f 5f       	subi	r16, 0xFF	; 255
     a5e:	9d c0       	rjmp	.+314    	; 0xb9a <main+0x2f2>
					}
					else
					{
						press_state_left = PRESSED_TWICE;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <press_state_left>
						isPressedBefore_left=0;
     a66:	00 e0       	ldi	r16, 0x00	; 0
     a68:	98 c0       	rjmp	.+304    	; 0xb9a <main+0x2f2>
					}
				}
				break;
				
				case FRONT_LIGHT:
				if(isPressedBefore_front==0)
     a6a:	b1 10       	cpse	r11, r1
     a6c:	0d c0       	rjmp	.+26     	; 0xa88 <main+0x1e0>
				{
					if(press_state_front == LONG_HOLD || press_state_front == SHORT_HOLD )
     a6e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <press_state_front>
     a72:	83 30       	cpi	r24, 0x03	; 3
     a74:	21 f0       	breq	.+8      	; 0xa7e <main+0x1d6>
     a76:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <press_state_front>
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	09 f4       	brne	.+2      	; 0xa80 <main+0x1d8>
					{
						isPressedBefore_front++;
     a7e:	b3 94       	inc	r11
					}
					press_state_front = PRESSED_ONCE;
     a80:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <press_state_front>
					isPressedBefore_front++;
     a84:	b3 94       	inc	r11
     a86:	89 c0       	rjmp	.+274    	; 0xb9a <main+0x2f2>
				}
				else
				{
					if(isPressedBefore_front==1)
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	b8 12       	cpse	r11, r24
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <main+0x1ea>
					{
						isPressedBefore_front++;
     a8e:	b3 94       	inc	r11
     a90:	84 c0       	rjmp	.+264    	; 0xb9a <main+0x2f2>
					}
					else
					{
						press_state_front = PRESSED_TWICE;
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <press_state_front>
						isPressedBefore_front=0;
     a98:	b1 2c       	mov	r11, r1
     a9a:	7f c0       	rjmp	.+254    	; 0xb9a <main+0x2f2>
					}
				}
				break;
				
				case BACK_LIGH:
				if(isPressedBefore_back==0)
     a9c:	a1 10       	cpse	r10, r1
     a9e:	0d c0       	rjmp	.+26     	; 0xaba <main+0x212>
				{
					if(press_state_back == LONG_HOLD || press_state_back == SHORT_HOLD )
     aa0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <press_state_back>
     aa4:	83 30       	cpi	r24, 0x03	; 3
     aa6:	21 f0       	breq	.+8      	; 0xab0 <main+0x208>
     aa8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <press_state_back>
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	09 f4       	brne	.+2      	; 0xab2 <main+0x20a>
					{
						isPressedBefore_back++;
     ab0:	a3 94       	inc	r10
					}
					press_state_back = PRESSED_ONCE;
     ab2:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <press_state_back>
					isPressedBefore_back++;
     ab6:	a3 94       	inc	r10
     ab8:	70 c0       	rjmp	.+224    	; 0xb9a <main+0x2f2>
				}
				else
				{
					if(isPressedBefore_back==1)
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	a8 12       	cpse	r10, r24
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <main+0x21c>
					{
						isPressedBefore_back++;
     ac0:	a3 94       	inc	r10
     ac2:	6b c0       	rjmp	.+214    	; 0xb9a <main+0x2f2>
					}
					else
					{
						press_state_back = PRESSED_TWICE;
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <press_state_back>
						isPressedBefore_back=0;
     aca:	a1 2c       	mov	r10, r1
     acc:	66 c0       	rjmp	.+204    	; 0xb9a <main+0x2f2>
				}
				break;
				
			}
		}
		else if(counter<500)    //short hold   
     ace:	84 ef       	ldi	r24, 0xF4	; 244
     ad0:	c8 16       	cp	r12, r24
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	d8 06       	cpc	r13, r24
     ad6:	e1 04       	cpc	r14, r1
     ad8:	f1 04       	cpc	r15, r1
     ada:	58 f5       	brcc	.+86     	; 0xb32 <main+0x28a>
		{
			switch(key)
     adc:	d7 33       	cpi	r29, 0x37	; 55
     ade:	49 f0       	breq	.+18     	; 0xaf2 <main+0x24a>
     ae0:	18 f4       	brcc	.+6      	; 0xae8 <main+0x240>
     ae2:	df 32       	cpi	r29, 0x2F	; 47
     ae4:	f1 f0       	breq	.+60     	; 0xb22 <main+0x27a>
     ae6:	50 c0       	rjmp	.+160    	; 0xb88 <main+0x2e0>
     ae8:	d8 33       	cpi	r29, 0x38	; 56
     aea:	59 f0       	breq	.+22     	; 0xb02 <main+0x25a>
     aec:	d9 33       	cpi	r29, 0x39	; 57
     aee:	89 f0       	breq	.+34     	; 0xb12 <main+0x26a>
     af0:	4b c0       	rjmp	.+150    	; 0xb88 <main+0x2e0>
			{
				case RIGHT_WARNING: press_state_right = SHORT_HOLD;break;
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <press_state_right>
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
			isPressedBefore_back=0;
     af8:	a1 2c       	mov	r10, r1
				case BACK_LIGH    : press_state_back  = SHORT_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
     afa:	b1 2c       	mov	r11, r1
				case FRONT_LIGHT  : press_state_front = SHORT_HOLD;break;
				case BACK_LIGH    : press_state_back  = SHORT_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
     afc:	00 e0       	ldi	r16, 0x00	; 0
				case LEFT_WARNING : press_state_left  = SHORT_HOLD;break;
				case FRONT_LIGHT  : press_state_front = SHORT_HOLD;break;
				case BACK_LIGH    : press_state_back  = SHORT_HOLD;break;
			}
			
			isPressedBefore_right=0;
     afe:	10 e0       	ldi	r17, 0x00	; 0
		}
		else if(counter<500)    //short hold   
		{
			switch(key)
			{
				case RIGHT_WARNING: press_state_right = SHORT_HOLD;break;
     b00:	4c c0       	rjmp	.+152    	; 0xb9a <main+0x2f2>
				case LEFT_WARNING : press_state_left  = SHORT_HOLD;break;
     b02:	82 e0       	ldi	r24, 0x02	; 2
     b04:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <press_state_left>
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
			isPressedBefore_back=0;
     b08:	a1 2c       	mov	r10, r1
				case BACK_LIGH    : press_state_back  = SHORT_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
     b0a:	b1 2c       	mov	r11, r1
				case FRONT_LIGHT  : press_state_front = SHORT_HOLD;break;
				case BACK_LIGH    : press_state_back  = SHORT_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
     b0c:	00 e0       	ldi	r16, 0x00	; 0
				case LEFT_WARNING : press_state_left  = SHORT_HOLD;break;
				case FRONT_LIGHT  : press_state_front = SHORT_HOLD;break;
				case BACK_LIGH    : press_state_back  = SHORT_HOLD;break;
			}
			
			isPressedBefore_right=0;
     b0e:	10 e0       	ldi	r17, 0x00	; 0
		else if(counter<500)    //short hold   
		{
			switch(key)
			{
				case RIGHT_WARNING: press_state_right = SHORT_HOLD;break;
				case LEFT_WARNING : press_state_left  = SHORT_HOLD;break;
     b10:	44 c0       	rjmp	.+136    	; 0xb9a <main+0x2f2>
				case FRONT_LIGHT  : press_state_front = SHORT_HOLD;break;
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <press_state_front>
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
			isPressedBefore_back=0;
     b18:	a1 2c       	mov	r10, r1
				case BACK_LIGH    : press_state_back  = SHORT_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
     b1a:	b1 2c       	mov	r11, r1
				case FRONT_LIGHT  : press_state_front = SHORT_HOLD;break;
				case BACK_LIGH    : press_state_back  = SHORT_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
     b1c:	00 e0       	ldi	r16, 0x00	; 0
				case LEFT_WARNING : press_state_left  = SHORT_HOLD;break;
				case FRONT_LIGHT  : press_state_front = SHORT_HOLD;break;
				case BACK_LIGH    : press_state_back  = SHORT_HOLD;break;
			}
			
			isPressedBefore_right=0;
     b1e:	10 e0       	ldi	r17, 0x00	; 0
		{
			switch(key)
			{
				case RIGHT_WARNING: press_state_right = SHORT_HOLD;break;
				case LEFT_WARNING : press_state_left  = SHORT_HOLD;break;
				case FRONT_LIGHT  : press_state_front = SHORT_HOLD;break;
     b20:	3c c0       	rjmp	.+120    	; 0xb9a <main+0x2f2>
				case BACK_LIGH    : press_state_back  = SHORT_HOLD;break;
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <press_state_back>
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
			isPressedBefore_back=0;
     b28:	a1 2c       	mov	r10, r1
				case BACK_LIGH    : press_state_back  = SHORT_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
     b2a:	b1 2c       	mov	r11, r1
				case FRONT_LIGHT  : press_state_front = SHORT_HOLD;break;
				case BACK_LIGH    : press_state_back  = SHORT_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
     b2c:	00 e0       	ldi	r16, 0x00	; 0
				case LEFT_WARNING : press_state_left  = SHORT_HOLD;break;
				case FRONT_LIGHT  : press_state_front = SHORT_HOLD;break;
				case BACK_LIGH    : press_state_back  = SHORT_HOLD;break;
			}
			
			isPressedBefore_right=0;
     b2e:	10 e0       	ldi	r17, 0x00	; 0
			switch(key)
			{
				case RIGHT_WARNING: press_state_right = SHORT_HOLD;break;
				case LEFT_WARNING : press_state_left  = SHORT_HOLD;break;
				case FRONT_LIGHT  : press_state_front = SHORT_HOLD;break;
				case BACK_LIGH    : press_state_back  = SHORT_HOLD;break;
     b30:	34 c0       	rjmp	.+104    	; 0xb9a <main+0x2f2>
			isPressedBefore_back=0;

		}
		else   //long hold
		{	
			switch(key)
     b32:	d7 33       	cpi	r29, 0x37	; 55
     b34:	49 f0       	breq	.+18     	; 0xb48 <main+0x2a0>
     b36:	18 f4       	brcc	.+6      	; 0xb3e <main+0x296>
     b38:	df 32       	cpi	r29, 0x2F	; 47
     b3a:	f1 f0       	breq	.+60     	; 0xb78 <main+0x2d0>
     b3c:	2a c0       	rjmp	.+84     	; 0xb92 <main+0x2ea>
     b3e:	d8 33       	cpi	r29, 0x38	; 56
     b40:	59 f0       	breq	.+22     	; 0xb58 <main+0x2b0>
     b42:	d9 33       	cpi	r29, 0x39	; 57
     b44:	89 f0       	breq	.+34     	; 0xb68 <main+0x2c0>
     b46:	25 c0       	rjmp	.+74     	; 0xb92 <main+0x2ea>
			{
				case RIGHT_WARNING: press_state_right = LONG_HOLD;break;
     b48:	83 e0       	ldi	r24, 0x03	; 3
     b4a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <press_state_right>
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
			isPressedBefore_back=0;
     b4e:	a1 2c       	mov	r10, r1
				case BACK_LIGH    : press_state_back  = LONG_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
     b50:	b1 2c       	mov	r11, r1
				case FRONT_LIGHT  : press_state_front = LONG_HOLD;break;
				case BACK_LIGH    : press_state_back  = LONG_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
     b52:	00 e0       	ldi	r16, 0x00	; 0
				case LEFT_WARNING : press_state_left  = LONG_HOLD;break;
				case FRONT_LIGHT  : press_state_front = LONG_HOLD;break;
				case BACK_LIGH    : press_state_back  = LONG_HOLD;break;
			}
			
			isPressedBefore_right=0;
     b54:	10 e0       	ldi	r17, 0x00	; 0
		}
		else   //long hold
		{	
			switch(key)
			{
				case RIGHT_WARNING: press_state_right = LONG_HOLD;break;
     b56:	21 c0       	rjmp	.+66     	; 0xb9a <main+0x2f2>
				case LEFT_WARNING : press_state_left  = LONG_HOLD;break;
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <press_state_left>
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
			isPressedBefore_back=0;
     b5e:	a1 2c       	mov	r10, r1
				case BACK_LIGH    : press_state_back  = LONG_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
     b60:	b1 2c       	mov	r11, r1
				case FRONT_LIGHT  : press_state_front = LONG_HOLD;break;
				case BACK_LIGH    : press_state_back  = LONG_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
     b62:	00 e0       	ldi	r16, 0x00	; 0
				case LEFT_WARNING : press_state_left  = LONG_HOLD;break;
				case FRONT_LIGHT  : press_state_front = LONG_HOLD;break;
				case BACK_LIGH    : press_state_back  = LONG_HOLD;break;
			}
			
			isPressedBefore_right=0;
     b64:	10 e0       	ldi	r17, 0x00	; 0
		else   //long hold
		{	
			switch(key)
			{
				case RIGHT_WARNING: press_state_right = LONG_HOLD;break;
				case LEFT_WARNING : press_state_left  = LONG_HOLD;break;
     b66:	19 c0       	rjmp	.+50     	; 0xb9a <main+0x2f2>
				case FRONT_LIGHT  : press_state_front = LONG_HOLD;break;
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <press_state_front>
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
			isPressedBefore_back=0;
     b6e:	a1 2c       	mov	r10, r1
				case BACK_LIGH    : press_state_back  = LONG_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
     b70:	b1 2c       	mov	r11, r1
				case FRONT_LIGHT  : press_state_front = LONG_HOLD;break;
				case BACK_LIGH    : press_state_back  = LONG_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
     b72:	00 e0       	ldi	r16, 0x00	; 0
				case LEFT_WARNING : press_state_left  = LONG_HOLD;break;
				case FRONT_LIGHT  : press_state_front = LONG_HOLD;break;
				case BACK_LIGH    : press_state_back  = LONG_HOLD;break;
			}
			
			isPressedBefore_right=0;
     b74:	10 e0       	ldi	r17, 0x00	; 0
		{	
			switch(key)
			{
				case RIGHT_WARNING: press_state_right = LONG_HOLD;break;
				case LEFT_WARNING : press_state_left  = LONG_HOLD;break;
				case FRONT_LIGHT  : press_state_front = LONG_HOLD;break;
     b76:	11 c0       	rjmp	.+34     	; 0xb9a <main+0x2f2>
				case BACK_LIGH    : press_state_back  = LONG_HOLD;break;
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <press_state_back>
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
			isPressedBefore_back=0;
     b7e:	a1 2c       	mov	r10, r1
				case BACK_LIGH    : press_state_back  = LONG_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
     b80:	b1 2c       	mov	r11, r1
				case FRONT_LIGHT  : press_state_front = LONG_HOLD;break;
				case BACK_LIGH    : press_state_back  = LONG_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
     b82:	00 e0       	ldi	r16, 0x00	; 0
				case LEFT_WARNING : press_state_left  = LONG_HOLD;break;
				case FRONT_LIGHT  : press_state_front = LONG_HOLD;break;
				case BACK_LIGH    : press_state_back  = LONG_HOLD;break;
			}
			
			isPressedBefore_right=0;
     b84:	10 e0       	ldi	r17, 0x00	; 0
			switch(key)
			{
				case RIGHT_WARNING: press_state_right = LONG_HOLD;break;
				case LEFT_WARNING : press_state_left  = LONG_HOLD;break;
				case FRONT_LIGHT  : press_state_front = LONG_HOLD;break;
				case BACK_LIGH    : press_state_back  = LONG_HOLD;break;
     b86:	09 c0       	rjmp	.+18     	; 0xb9a <main+0x2f2>
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
			isPressedBefore_back=0;
     b88:	a1 2c       	mov	r10, r1
				case BACK_LIGH    : press_state_back  = SHORT_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
     b8a:	b1 2c       	mov	r11, r1
				case FRONT_LIGHT  : press_state_front = SHORT_HOLD;break;
				case BACK_LIGH    : press_state_back  = SHORT_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
     b8c:	00 e0       	ldi	r16, 0x00	; 0
				case LEFT_WARNING : press_state_left  = SHORT_HOLD;break;
				case FRONT_LIGHT  : press_state_front = SHORT_HOLD;break;
				case BACK_LIGH    : press_state_back  = SHORT_HOLD;break;
			}
			
			isPressedBefore_right=0;
     b8e:	10 e0       	ldi	r17, 0x00	; 0
     b90:	04 c0       	rjmp	.+8      	; 0xb9a <main+0x2f2>
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
			isPressedBefore_back=0;
     b92:	a1 2c       	mov	r10, r1
				case BACK_LIGH    : press_state_back  = LONG_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
			isPressedBefore_front=0;
     b94:	b1 2c       	mov	r11, r1
				case FRONT_LIGHT  : press_state_front = LONG_HOLD;break;
				case BACK_LIGH    : press_state_back  = LONG_HOLD;break;
			}
			
			isPressedBefore_right=0;
			isPressedBefore_left=0;
     b96:	00 e0       	ldi	r16, 0x00	; 0
				case LEFT_WARNING : press_state_left  = LONG_HOLD;break;
				case FRONT_LIGHT  : press_state_front = LONG_HOLD;break;
				case BACK_LIGH    : press_state_back  = LONG_HOLD;break;
			}
			
			isPressedBefore_right=0;
     b98:	10 e0       	ldi	r17, 0x00	; 0
			isPressedBefore_back=0;
		}
		
		
		
		switch(press_state_right)
     b9a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <press_state_right>
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	79 f0       	breq	.+30     	; 0xbc0 <main+0x318>
     ba2:	28 f0       	brcs	.+10     	; 0xbae <main+0x306>
     ba4:	82 30       	cpi	r24, 0x02	; 2
     ba6:	a9 f0       	breq	.+42     	; 0xbd2 <main+0x32a>
     ba8:	83 30       	cpi	r24, 0x03	; 3
     baa:	e1 f0       	breq	.+56     	; 0xbe4 <main+0x33c>
     bac:	23 c0       	rjmp	.+70     	; 0xbf4 <main+0x34c>
		{
			case PRESSED_ONCE : LCD_goto(0,8);LCD_WriteString("ON   "); break;
     bae:	68 e0       	ldi	r22, 0x08	; 8
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
     bb6:	8b e0       	ldi	r24, 0x0B	; 11
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
     bbe:	1a c0       	rjmp	.+52     	; 0xbf4 <main+0x34c>
			case PRESSED_TWICE: LCD_goto(0,8);LCD_WriteString("OFF  "); break;
     bc0:	68 e0       	ldi	r22, 0x08	; 8
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
     bc8:	81 e1       	ldi	r24, 0x11	; 17
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
     bd0:	11 c0       	rjmp	.+34     	; 0xbf4 <main+0x34c>
			case SHORT_HOLD   : LCD_goto(0,8);LCD_WriteString("SHORT"); break;
     bd2:	68 e0       	ldi	r22, 0x08	; 8
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
     bda:	87 e1       	ldi	r24, 0x17	; 23
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
     be2:	08 c0       	rjmp	.+16     	; 0xbf4 <main+0x34c>
			case LONG_HOLD    : LCD_goto(0,8);LCD_WriteString("LONG "); break;
     be4:	68 e0       	ldi	r22, 0x08	; 8
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
     bec:	8d e1       	ldi	r24, 0x1D	; 29
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
		}
		
		switch(press_state_left)
     bf4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <press_state_left>
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	79 f0       	breq	.+30     	; 0xc1a <main+0x372>
     bfc:	28 f0       	brcs	.+10     	; 0xc08 <main+0x360>
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	a9 f0       	breq	.+42     	; 0xc2c <main+0x384>
     c02:	83 30       	cpi	r24, 0x03	; 3
     c04:	e1 f0       	breq	.+56     	; 0xc3e <main+0x396>
     c06:	23 c0       	rjmp	.+70     	; 0xc4e <main+0x3a6>
		{
			case PRESSED_ONCE : LCD_goto(1,8);LCD_WriteString("ON   "); break;
     c08:	68 e0       	ldi	r22, 0x08	; 8
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
     c10:	8b e0       	ldi	r24, 0x0B	; 11
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
     c18:	1a c0       	rjmp	.+52     	; 0xc4e <main+0x3a6>
			case PRESSED_TWICE: LCD_goto(1,8);LCD_WriteString("OFF  "); break;
     c1a:	68 e0       	ldi	r22, 0x08	; 8
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
     c22:	81 e1       	ldi	r24, 0x11	; 17
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
     c2a:	11 c0       	rjmp	.+34     	; 0xc4e <main+0x3a6>
			case SHORT_HOLD   : LCD_goto(1,8);LCD_WriteString("SHORT"); break;
     c2c:	68 e0       	ldi	r22, 0x08	; 8
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
     c34:	87 e1       	ldi	r24, 0x17	; 23
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
     c3c:	08 c0       	rjmp	.+16     	; 0xc4e <main+0x3a6>
			case LONG_HOLD    : LCD_goto(1,8);LCD_WriteString("LONG "); break;
     c3e:	68 e0       	ldi	r22, 0x08	; 8
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
     c46:	8d e1       	ldi	r24, 0x1D	; 29
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
		}
		
		switch(press_state_front)
     c4e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <press_state_front>
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	79 f0       	breq	.+30     	; 0xc74 <main+0x3cc>
     c56:	28 f0       	brcs	.+10     	; 0xc62 <main+0x3ba>
     c58:	82 30       	cpi	r24, 0x02	; 2
     c5a:	a9 f0       	breq	.+42     	; 0xc86 <main+0x3de>
     c5c:	83 30       	cpi	r24, 0x03	; 3
     c5e:	e1 f0       	breq	.+56     	; 0xc98 <main+0x3f0>
     c60:	23 c0       	rjmp	.+70     	; 0xca8 <main+0x400>
		{
			case PRESSED_ONCE : LCD_goto(2,8);LCD_WriteString("ON   "); break;
     c62:	68 e0       	ldi	r22, 0x08	; 8
     c64:	82 e0       	ldi	r24, 0x02	; 2
     c66:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
     c6a:	8b e0       	ldi	r24, 0x0B	; 11
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
     c72:	1a c0       	rjmp	.+52     	; 0xca8 <main+0x400>
			case PRESSED_TWICE: LCD_goto(2,8);LCD_WriteString("OFF  "); break;
     c74:	68 e0       	ldi	r22, 0x08	; 8
     c76:	82 e0       	ldi	r24, 0x02	; 2
     c78:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
     c7c:	81 e1       	ldi	r24, 0x11	; 17
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
     c84:	11 c0       	rjmp	.+34     	; 0xca8 <main+0x400>
			case SHORT_HOLD   : LCD_goto(2,8);LCD_WriteString("SHORT"); break;
     c86:	68 e0       	ldi	r22, 0x08	; 8
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
     c8e:	87 e1       	ldi	r24, 0x17	; 23
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
     c96:	08 c0       	rjmp	.+16     	; 0xca8 <main+0x400>
			case LONG_HOLD    : LCD_goto(2,8);LCD_WriteString("LONG "); break;
     c98:	68 e0       	ldi	r22, 0x08	; 8
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
     ca0:	8d e1       	ldi	r24, 0x1D	; 29
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
		}
		
		switch(press_state_back)
     ca8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <press_state_back>
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	79 f0       	breq	.+30     	; 0xcce <main+0x426>
     cb0:	28 f0       	brcs	.+10     	; 0xcbc <main+0x414>
     cb2:	82 30       	cpi	r24, 0x02	; 2
     cb4:	a9 f0       	breq	.+42     	; 0xce0 <main+0x438>
     cb6:	83 30       	cpi	r24, 0x03	; 3
     cb8:	e1 f0       	breq	.+56     	; 0xcf2 <main+0x44a>
     cba:	3e ce       	rjmp	.-900    	; 0x938 <main+0x90>
		{
			case PRESSED_ONCE : LCD_goto(3,8);LCD_WriteString("ON   "); break;
     cbc:	68 e0       	ldi	r22, 0x08	; 8
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
     cc4:	8b e0       	ldi	r24, 0x0B	; 11
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
     ccc:	35 ce       	rjmp	.-918    	; 0x938 <main+0x90>
			case PRESSED_TWICE: LCD_goto(3,8);LCD_WriteString("OFF  "); break;
     cce:	68 e0       	ldi	r22, 0x08	; 8
     cd0:	83 e0       	ldi	r24, 0x03	; 3
     cd2:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
     cd6:	81 e1       	ldi	r24, 0x11	; 17
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
     cde:	2c ce       	rjmp	.-936    	; 0x938 <main+0x90>
			case SHORT_HOLD   : LCD_goto(3,8);LCD_WriteString("SHORT"); break;
     ce0:	68 e0       	ldi	r22, 0x08	; 8
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
     ce8:	87 e1       	ldi	r24, 0x17	; 23
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
     cf0:	23 ce       	rjmp	.-954    	; 0x938 <main+0x90>
			case LONG_HOLD    : LCD_goto(3,8);LCD_WriteString("LONG "); break;
     cf2:	68 e0       	ldi	r22, 0x08	; 8
     cf4:	83 e0       	ldi	r24, 0x03	; 3
     cf6:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_goto>
     cfa:	8d e1       	ldi	r24, 0x1D	; 29
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteString>
     d02:	1a ce       	rjmp	.-972    	; 0x938 <main+0x90>

00000d04 <DIO_vSetPinMode>:

volatile u8* port_arr[12]={&PORTA,&PORTB,&PORTC,&PORTD, &DDRA,&DDRB,&DDRC,&DDRD, &PINA,&PINB,&PINC,&PIND};
	
void DIO_vSetPinMode(dio_channel_t channelID,dio_mode mode)
{
	u8 port_idx=channelID/8;
     d04:	e8 2f       	mov	r30, r24
     d06:	e6 95       	lsr	r30
     d08:	e6 95       	lsr	r30
     d0a:	e6 95       	lsr	r30
	u8 pin_idx=channelID%8;
     d0c:	48 2f       	mov	r20, r24
     d0e:	47 70       	andi	r20, 0x07	; 7
	
	(mode == OUTPUT_HIGH)||(mode ==OUTPUT_LOW)     ? SET_BIT(*port_arr[port_idx+4],pin_idx):CLR_BIT(*port_arr[port_idx+4],pin_idx);
     d10:	62 30       	cpi	r22, 0x02	; 2
     d12:	b0 f4       	brcc	.+44     	; 0xd40 <DIO_vSetPinMode+0x3c>
     d14:	ae 2f       	mov	r26, r30
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	14 96       	adiw	r26, 0x04	; 4
     d1a:	aa 0f       	add	r26, r26
     d1c:	bb 1f       	adc	r27, r27
     d1e:	a4 58       	subi	r26, 0x84	; 132
     d20:	bf 4f       	sbci	r27, 0xFF	; 255
     d22:	0d 90       	ld	r0, X+
     d24:	bc 91       	ld	r27, X
     d26:	a0 2d       	mov	r26, r0
     d28:	2c 91       	ld	r18, X
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	04 2e       	mov	r0, r20
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <DIO_vSetPinMode+0x32>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <DIO_vSetPinMode+0x2e>
     d3a:	82 2b       	or	r24, r18
     d3c:	8c 93       	st	X, r24
     d3e:	16 c0       	rjmp	.+44     	; 0xd6c <DIO_vSetPinMode+0x68>
     d40:	ae 2f       	mov	r26, r30
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	14 96       	adiw	r26, 0x04	; 4
     d46:	aa 0f       	add	r26, r26
     d48:	bb 1f       	adc	r27, r27
     d4a:	a4 58       	subi	r26, 0x84	; 132
     d4c:	bf 4f       	sbci	r27, 0xFF	; 255
     d4e:	0d 90       	ld	r0, X+
     d50:	bc 91       	ld	r27, X
     d52:	a0 2d       	mov	r26, r0
     d54:	8c 91       	ld	r24, X
     d56:	21 e0       	ldi	r18, 0x01	; 1
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	04 2e       	mov	r0, r20
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <DIO_vSetPinMode+0x5e>
     d5e:	22 0f       	add	r18, r18
     d60:	33 1f       	adc	r19, r19
     d62:	0a 94       	dec	r0
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <DIO_vSetPinMode+0x5a>
     d66:	20 95       	com	r18
     d68:	28 23       	and	r18, r24
     d6a:	2c 93       	st	X, r18
	(mode == OUTPUT_HIGH)||(mode ==INPUT_PULLUP) ? SET_BIT(*port_arr[port_idx],pin_idx)  :CLR_BIT(*port_arr[port_idx],pin_idx);
     d6c:	61 30       	cpi	r22, 0x01	; 1
     d6e:	11 f0       	breq	.+4      	; 0xd74 <DIO_vSetPinMode+0x70>
     d70:	63 30       	cpi	r22, 0x03	; 3
     d72:	99 f4       	brne	.+38     	; 0xd9a <DIO_vSetPinMode+0x96>
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	ee 0f       	add	r30, r30
     d78:	ff 1f       	adc	r31, r31
     d7a:	e4 58       	subi	r30, 0x84	; 132
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	01 90       	ld	r0, Z+
     d80:	f0 81       	ld	r31, Z
     d82:	e0 2d       	mov	r30, r0
     d84:	20 81       	ld	r18, Z
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <DIO_vSetPinMode+0x8c>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	4a 95       	dec	r20
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <DIO_vSetPinMode+0x88>
     d94:	82 2b       	or	r24, r18
     d96:	80 83       	st	Z, r24
     d98:	08 95       	ret
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	ee 0f       	add	r30, r30
     d9e:	ff 1f       	adc	r31, r31
     da0:	e4 58       	subi	r30, 0x84	; 132
     da2:	ff 4f       	sbci	r31, 0xFF	; 255
     da4:	01 90       	ld	r0, Z+
     da6:	f0 81       	ld	r31, Z
     da8:	e0 2d       	mov	r30, r0
     daa:	20 81       	ld	r18, Z
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <DIO_vSetPinMode+0xb2>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	4a 95       	dec	r20
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <DIO_vSetPinMode+0xae>
     dba:	80 95       	com	r24
     dbc:	82 23       	and	r24, r18
     dbe:	80 83       	st	Z, r24
     dc0:	08 95       	ret

00000dc2 <DIO_u8GetPinValue>:
	
}

u8 DIO_u8GetPinValue(dio_channel_t channelID)
{
	u8 port_idx=channelID/8;
     dc2:	e8 2f       	mov	r30, r24
     dc4:	e6 95       	lsr	r30
     dc6:	e6 95       	lsr	r30
     dc8:	e6 95       	lsr	r30
	u8 pin_idx=channelID%8;
     dca:	28 2f       	mov	r18, r24
     dcc:	27 70       	andi	r18, 0x07	; 7
	return GET_BIT(*port_arr[port_idx+8],pin_idx);
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	38 96       	adiw	r30, 0x08	; 8
     dd2:	ee 0f       	add	r30, r30
     dd4:	ff 1f       	adc	r31, r31
     dd6:	e4 58       	subi	r30, 0x84	; 132
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	01 90       	ld	r0, Z+
     ddc:	f0 81       	ld	r31, Z
     dde:	e0 2d       	mov	r30, r0
     de0:	90 81       	ld	r25, Z
     de2:	89 2f       	mov	r24, r25
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 c0       	rjmp	.+4      	; 0xdec <DIO_u8GetPinValue+0x2a>
     de8:	95 95       	asr	r25
     dea:	87 95       	ror	r24
     dec:	2a 95       	dec	r18
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <DIO_u8GetPinValue+0x26>
}
     df0:	81 70       	andi	r24, 0x01	; 1
     df2:	08 95       	ret

00000df4 <__vector_1>:


/*******************************ISR********************************/

ISR(INT0_vect)
{
     df4:	1f 92       	push	r1
     df6:	0f 92       	push	r0
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	0f 92       	push	r0
     dfc:	11 24       	eor	r1, r1
     dfe:	2f 93       	push	r18
     e00:	3f 93       	push	r19
     e02:	4f 93       	push	r20
     e04:	5f 93       	push	r21
     e06:	6f 93       	push	r22
     e08:	7f 93       	push	r23
     e0a:	8f 93       	push	r24
     e0c:	9f 93       	push	r25
     e0e:	af 93       	push	r26
     e10:	bf 93       	push	r27
     e12:	ef 93       	push	r30
     e14:	ff 93       	push	r31
	
	if (INT0_Fptr!=NULLPTR)
     e16:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <INT0_Fptr>
     e1a:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <INT0_Fptr+0x1>
     e1e:	30 97       	sbiw	r30, 0x00	; 0
     e20:	09 f0       	breq	.+2      	; 0xe24 <__vector_1+0x30>
	{
		INT0_Fptr();
     e22:	09 95       	icall
	}
}
     e24:	ff 91       	pop	r31
     e26:	ef 91       	pop	r30
     e28:	bf 91       	pop	r27
     e2a:	af 91       	pop	r26
     e2c:	9f 91       	pop	r25
     e2e:	8f 91       	pop	r24
     e30:	7f 91       	pop	r23
     e32:	6f 91       	pop	r22
     e34:	5f 91       	pop	r21
     e36:	4f 91       	pop	r20
     e38:	3f 91       	pop	r19
     e3a:	2f 91       	pop	r18
     e3c:	0f 90       	pop	r0
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	0f 90       	pop	r0
     e42:	1f 90       	pop	r1
     e44:	18 95       	reti

00000e46 <__vector_2>:
ISR(INT1_vect)
{
     e46:	1f 92       	push	r1
     e48:	0f 92       	push	r0
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	0f 92       	push	r0
     e4e:	11 24       	eor	r1, r1
     e50:	2f 93       	push	r18
     e52:	3f 93       	push	r19
     e54:	4f 93       	push	r20
     e56:	5f 93       	push	r21
     e58:	6f 93       	push	r22
     e5a:	7f 93       	push	r23
     e5c:	8f 93       	push	r24
     e5e:	9f 93       	push	r25
     e60:	af 93       	push	r26
     e62:	bf 93       	push	r27
     e64:	ef 93       	push	r30
     e66:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
     e68:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <INT1_Fptr>
     e6c:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <INT1_Fptr+0x1>
     e70:	30 97       	sbiw	r30, 0x00	; 0
     e72:	09 f0       	breq	.+2      	; 0xe76 <__vector_2+0x30>
	{
		INT1_Fptr();
     e74:	09 95       	icall
	}
}
     e76:	ff 91       	pop	r31
     e78:	ef 91       	pop	r30
     e7a:	bf 91       	pop	r27
     e7c:	af 91       	pop	r26
     e7e:	9f 91       	pop	r25
     e80:	8f 91       	pop	r24
     e82:	7f 91       	pop	r23
     e84:	6f 91       	pop	r22
     e86:	5f 91       	pop	r21
     e88:	4f 91       	pop	r20
     e8a:	3f 91       	pop	r19
     e8c:	2f 91       	pop	r18
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	0f 90       	pop	r0
     e94:	1f 90       	pop	r1
     e96:	18 95       	reti

00000e98 <__vector_3>:
ISR(INT2_vect)
{
     e98:	1f 92       	push	r1
     e9a:	0f 92       	push	r0
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	0f 92       	push	r0
     ea0:	11 24       	eor	r1, r1
     ea2:	2f 93       	push	r18
     ea4:	3f 93       	push	r19
     ea6:	4f 93       	push	r20
     ea8:	5f 93       	push	r21
     eaa:	6f 93       	push	r22
     eac:	7f 93       	push	r23
     eae:	8f 93       	push	r24
     eb0:	9f 93       	push	r25
     eb2:	af 93       	push	r26
     eb4:	bf 93       	push	r27
     eb6:	ef 93       	push	r30
     eb8:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
     eba:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <INT2_Fptr>
     ebe:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <INT2_Fptr+0x1>
     ec2:	30 97       	sbiw	r30, 0x00	; 0
     ec4:	09 f0       	breq	.+2      	; 0xec8 <__vector_3+0x30>
	{ 
		INT2_Fptr();
     ec6:	09 95       	icall
	}
     ec8:	ff 91       	pop	r31
     eca:	ef 91       	pop	r30
     ecc:	bf 91       	pop	r27
     ece:	af 91       	pop	r26
     ed0:	9f 91       	pop	r25
     ed2:	8f 91       	pop	r24
     ed4:	7f 91       	pop	r23
     ed6:	6f 91       	pop	r22
     ed8:	5f 91       	pop	r21
     eda:	4f 91       	pop	r20
     edc:	3f 91       	pop	r19
     ede:	2f 91       	pop	r18
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	0f 90       	pop	r0
     ee6:	1f 90       	pop	r1
     ee8:	18 95       	reti

00000eea <TIMER0_Init>:
	Timer2_OVF_Fptr=local_fptr;
}

void TIMER2_OC_SetCallBack(void(*local_fptr)(void))
{
	Timer2_OC_Fptr=local_fptr;
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	69 f0       	breq	.+26     	; 0xf08 <TIMER0_Init+0x1e>
     eee:	28 f0       	brcs	.+10     	; 0xefa <TIMER0_Init+0x10>
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	89 f0       	breq	.+34     	; 0xf16 <TIMER0_Init+0x2c>
     ef4:	83 30       	cpi	r24, 0x03	; 3
     ef6:	b1 f0       	breq	.+44     	; 0xf24 <TIMER0_Init+0x3a>
     ef8:	1b c0       	rjmp	.+54     	; 0xf30 <TIMER0_Init+0x46>
     efa:	83 b7       	in	r24, 0x33	; 51
     efc:	8f 7b       	andi	r24, 0xBF	; 191
     efe:	83 bf       	out	0x33, r24	; 51
     f00:	83 b7       	in	r24, 0x33	; 51
     f02:	87 7f       	andi	r24, 0xF7	; 247
     f04:	83 bf       	out	0x33, r24	; 51
     f06:	14 c0       	rjmp	.+40     	; 0xf30 <TIMER0_Init+0x46>
     f08:	83 b7       	in	r24, 0x33	; 51
     f0a:	80 64       	ori	r24, 0x40	; 64
     f0c:	83 bf       	out	0x33, r24	; 51
     f0e:	83 b7       	in	r24, 0x33	; 51
     f10:	87 7f       	andi	r24, 0xF7	; 247
     f12:	83 bf       	out	0x33, r24	; 51
     f14:	0d c0       	rjmp	.+26     	; 0xf30 <TIMER0_Init+0x46>
     f16:	83 b7       	in	r24, 0x33	; 51
     f18:	8f 7b       	andi	r24, 0xBF	; 191
     f1a:	83 bf       	out	0x33, r24	; 51
     f1c:	83 b7       	in	r24, 0x33	; 51
     f1e:	88 60       	ori	r24, 0x08	; 8
     f20:	83 bf       	out	0x33, r24	; 51
     f22:	06 c0       	rjmp	.+12     	; 0xf30 <TIMER0_Init+0x46>
     f24:	83 b7       	in	r24, 0x33	; 51
     f26:	80 64       	ori	r24, 0x40	; 64
     f28:	83 bf       	out	0x33, r24	; 51
     f2a:	83 b7       	in	r24, 0x33	; 51
     f2c:	88 60       	ori	r24, 0x08	; 8
     f2e:	83 bf       	out	0x33, r24	; 51
     f30:	86 2f       	mov	r24, r22
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	88 30       	cpi	r24, 0x08	; 8
     f36:	91 05       	cpc	r25, r1
     f38:	08 f0       	brcs	.+2      	; 0xf3c <TIMER0_Init+0x52>
     f3a:	54 c0       	rjmp	.+168    	; 0xfe4 <TIMER0_Init+0xfa>
     f3c:	fc 01       	movw	r30, r24
     f3e:	e6 5d       	subi	r30, 0xD6	; 214
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__tablejump2__>
     f46:	83 b7       	in	r24, 0x33	; 51
     f48:	8e 7f       	andi	r24, 0xFE	; 254
     f4a:	83 bf       	out	0x33, r24	; 51
     f4c:	83 b7       	in	r24, 0x33	; 51
     f4e:	8d 7f       	andi	r24, 0xFD	; 253
     f50:	83 bf       	out	0x33, r24	; 51
     f52:	83 b7       	in	r24, 0x33	; 51
     f54:	8b 7f       	andi	r24, 0xFB	; 251
     f56:	83 bf       	out	0x33, r24	; 51
     f58:	08 95       	ret
     f5a:	83 b7       	in	r24, 0x33	; 51
     f5c:	81 60       	ori	r24, 0x01	; 1
     f5e:	83 bf       	out	0x33, r24	; 51
     f60:	83 b7       	in	r24, 0x33	; 51
     f62:	8d 7f       	andi	r24, 0xFD	; 253
     f64:	83 bf       	out	0x33, r24	; 51
     f66:	83 b7       	in	r24, 0x33	; 51
     f68:	8b 7f       	andi	r24, 0xFB	; 251
     f6a:	83 bf       	out	0x33, r24	; 51
     f6c:	08 95       	ret
     f6e:	83 b7       	in	r24, 0x33	; 51
     f70:	8e 7f       	andi	r24, 0xFE	; 254
     f72:	83 bf       	out	0x33, r24	; 51
     f74:	83 b7       	in	r24, 0x33	; 51
     f76:	82 60       	ori	r24, 0x02	; 2
     f78:	83 bf       	out	0x33, r24	; 51
     f7a:	83 b7       	in	r24, 0x33	; 51
     f7c:	8b 7f       	andi	r24, 0xFB	; 251
     f7e:	83 bf       	out	0x33, r24	; 51
     f80:	08 95       	ret
     f82:	83 b7       	in	r24, 0x33	; 51
     f84:	81 60       	ori	r24, 0x01	; 1
     f86:	83 bf       	out	0x33, r24	; 51
     f88:	83 b7       	in	r24, 0x33	; 51
     f8a:	82 60       	ori	r24, 0x02	; 2
     f8c:	83 bf       	out	0x33, r24	; 51
     f8e:	83 b7       	in	r24, 0x33	; 51
     f90:	8b 7f       	andi	r24, 0xFB	; 251
     f92:	83 bf       	out	0x33, r24	; 51
     f94:	08 95       	ret
     f96:	83 b7       	in	r24, 0x33	; 51
     f98:	8e 7f       	andi	r24, 0xFE	; 254
     f9a:	83 bf       	out	0x33, r24	; 51
     f9c:	83 b7       	in	r24, 0x33	; 51
     f9e:	8d 7f       	andi	r24, 0xFD	; 253
     fa0:	83 bf       	out	0x33, r24	; 51
     fa2:	83 b7       	in	r24, 0x33	; 51
     fa4:	84 60       	ori	r24, 0x04	; 4
     fa6:	83 bf       	out	0x33, r24	; 51
     fa8:	08 95       	ret
     faa:	83 b7       	in	r24, 0x33	; 51
     fac:	81 60       	ori	r24, 0x01	; 1
     fae:	83 bf       	out	0x33, r24	; 51
     fb0:	83 b7       	in	r24, 0x33	; 51
     fb2:	8d 7f       	andi	r24, 0xFD	; 253
     fb4:	83 bf       	out	0x33, r24	; 51
     fb6:	83 b7       	in	r24, 0x33	; 51
     fb8:	84 60       	ori	r24, 0x04	; 4
     fba:	83 bf       	out	0x33, r24	; 51
     fbc:	08 95       	ret
     fbe:	83 b7       	in	r24, 0x33	; 51
     fc0:	8e 7f       	andi	r24, 0xFE	; 254
     fc2:	83 bf       	out	0x33, r24	; 51
     fc4:	83 b7       	in	r24, 0x33	; 51
     fc6:	82 60       	ori	r24, 0x02	; 2
     fc8:	83 bf       	out	0x33, r24	; 51
     fca:	83 b7       	in	r24, 0x33	; 51
     fcc:	84 60       	ori	r24, 0x04	; 4
     fce:	83 bf       	out	0x33, r24	; 51
     fd0:	08 95       	ret
     fd2:	83 b7       	in	r24, 0x33	; 51
     fd4:	81 60       	ori	r24, 0x01	; 1
     fd6:	83 bf       	out	0x33, r24	; 51
     fd8:	83 b7       	in	r24, 0x33	; 51
     fda:	82 60       	ori	r24, 0x02	; 2
     fdc:	83 bf       	out	0x33, r24	; 51
     fde:	83 b7       	in	r24, 0x33	; 51
     fe0:	84 60       	ori	r24, 0x04	; 4
     fe2:	83 bf       	out	0x33, r24	; 51
     fe4:	08 95       	ret

00000fe6 <TIMER0_OVF_InterruptEnable>:
     fe6:	89 b7       	in	r24, 0x39	; 57
     fe8:	81 60       	ori	r24, 0x01	; 1
     fea:	89 bf       	out	0x39, r24	; 57
     fec:	08 95       	ret

00000fee <TIMER0_OVF_SetCallBack>:
     fee:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <Timer0_OVF_Fptr+0x1>
     ff2:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <Timer0_OVF_Fptr>
     ff6:	08 95       	ret

00000ff8 <__vector_11>:
     ff8:	1f 92       	push	r1
     ffa:	0f 92       	push	r0
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	0f 92       	push	r0
    1000:	11 24       	eor	r1, r1
    1002:	2f 93       	push	r18
    1004:	3f 93       	push	r19
    1006:	4f 93       	push	r20
    1008:	5f 93       	push	r21
    100a:	6f 93       	push	r22
    100c:	7f 93       	push	r23
    100e:	8f 93       	push	r24
    1010:	9f 93       	push	r25
    1012:	af 93       	push	r26
    1014:	bf 93       	push	r27
    1016:	ef 93       	push	r30
    1018:	ff 93       	push	r31
    101a:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <Timer0_OVF_Fptr>
    101e:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <Timer0_OVF_Fptr+0x1>
    1022:	30 97       	sbiw	r30, 0x00	; 0
    1024:	09 f0       	breq	.+2      	; 0x1028 <__vector_11+0x30>
    1026:	09 95       	icall
    1028:	ff 91       	pop	r31
    102a:	ef 91       	pop	r30
    102c:	bf 91       	pop	r27
    102e:	af 91       	pop	r26
    1030:	9f 91       	pop	r25
    1032:	8f 91       	pop	r24
    1034:	7f 91       	pop	r23
    1036:	6f 91       	pop	r22
    1038:	5f 91       	pop	r21
    103a:	4f 91       	pop	r20
    103c:	3f 91       	pop	r19
    103e:	2f 91       	pop	r18
    1040:	0f 90       	pop	r0
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	0f 90       	pop	r0
    1046:	1f 90       	pop	r1
    1048:	18 95       	reti

0000104a <__vector_10>:
    104a:	1f 92       	push	r1
    104c:	0f 92       	push	r0
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	0f 92       	push	r0
    1052:	11 24       	eor	r1, r1
    1054:	2f 93       	push	r18
    1056:	3f 93       	push	r19
    1058:	4f 93       	push	r20
    105a:	5f 93       	push	r21
    105c:	6f 93       	push	r22
    105e:	7f 93       	push	r23
    1060:	8f 93       	push	r24
    1062:	9f 93       	push	r25
    1064:	af 93       	push	r26
    1066:	bf 93       	push	r27
    1068:	ef 93       	push	r30
    106a:	ff 93       	push	r31
    106c:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <Timer0_OC_Fptr>
    1070:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <Timer0_OC_Fptr+0x1>
    1074:	30 97       	sbiw	r30, 0x00	; 0
    1076:	09 f0       	breq	.+2      	; 0x107a <__vector_10+0x30>
    1078:	09 95       	icall
    107a:	ff 91       	pop	r31
    107c:	ef 91       	pop	r30
    107e:	bf 91       	pop	r27
    1080:	af 91       	pop	r26
    1082:	9f 91       	pop	r25
    1084:	8f 91       	pop	r24
    1086:	7f 91       	pop	r23
    1088:	6f 91       	pop	r22
    108a:	5f 91       	pop	r21
    108c:	4f 91       	pop	r20
    108e:	3f 91       	pop	r19
    1090:	2f 91       	pop	r18
    1092:	0f 90       	pop	r0
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	0f 90       	pop	r0
    1098:	1f 90       	pop	r1
    109a:	18 95       	reti

0000109c <__vector_9>:
    109c:	1f 92       	push	r1
    109e:	0f 92       	push	r0
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	0f 92       	push	r0
    10a4:	11 24       	eor	r1, r1
    10a6:	2f 93       	push	r18
    10a8:	3f 93       	push	r19
    10aa:	4f 93       	push	r20
    10ac:	5f 93       	push	r21
    10ae:	6f 93       	push	r22
    10b0:	7f 93       	push	r23
    10b2:	8f 93       	push	r24
    10b4:	9f 93       	push	r25
    10b6:	af 93       	push	r26
    10b8:	bf 93       	push	r27
    10ba:	ef 93       	push	r30
    10bc:	ff 93       	push	r31
    10be:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <Timer1_OVF_Fptr>
    10c2:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <Timer1_OVF_Fptr+0x1>
    10c6:	30 97       	sbiw	r30, 0x00	; 0
    10c8:	09 f0       	breq	.+2      	; 0x10cc <__vector_9+0x30>
    10ca:	09 95       	icall
    10cc:	ff 91       	pop	r31
    10ce:	ef 91       	pop	r30
    10d0:	bf 91       	pop	r27
    10d2:	af 91       	pop	r26
    10d4:	9f 91       	pop	r25
    10d6:	8f 91       	pop	r24
    10d8:	7f 91       	pop	r23
    10da:	6f 91       	pop	r22
    10dc:	5f 91       	pop	r21
    10de:	4f 91       	pop	r20
    10e0:	3f 91       	pop	r19
    10e2:	2f 91       	pop	r18
    10e4:	0f 90       	pop	r0
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	0f 90       	pop	r0
    10ea:	1f 90       	pop	r1
    10ec:	18 95       	reti

000010ee <__vector_7>:
    10ee:	1f 92       	push	r1
    10f0:	0f 92       	push	r0
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	0f 92       	push	r0
    10f6:	11 24       	eor	r1, r1
    10f8:	2f 93       	push	r18
    10fa:	3f 93       	push	r19
    10fc:	4f 93       	push	r20
    10fe:	5f 93       	push	r21
    1100:	6f 93       	push	r22
    1102:	7f 93       	push	r23
    1104:	8f 93       	push	r24
    1106:	9f 93       	push	r25
    1108:	af 93       	push	r26
    110a:	bf 93       	push	r27
    110c:	ef 93       	push	r30
    110e:	ff 93       	push	r31
    1110:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <Timer1_OCA_Fptr>
    1114:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <Timer1_OCA_Fptr+0x1>
    1118:	30 97       	sbiw	r30, 0x00	; 0
    111a:	09 f0       	breq	.+2      	; 0x111e <__vector_7+0x30>
    111c:	09 95       	icall
    111e:	ff 91       	pop	r31
    1120:	ef 91       	pop	r30
    1122:	bf 91       	pop	r27
    1124:	af 91       	pop	r26
    1126:	9f 91       	pop	r25
    1128:	8f 91       	pop	r24
    112a:	7f 91       	pop	r23
    112c:	6f 91       	pop	r22
    112e:	5f 91       	pop	r21
    1130:	4f 91       	pop	r20
    1132:	3f 91       	pop	r19
    1134:	2f 91       	pop	r18
    1136:	0f 90       	pop	r0
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	0f 90       	pop	r0
    113c:	1f 90       	pop	r1
    113e:	18 95       	reti

00001140 <__vector_8>:
    1140:	1f 92       	push	r1
    1142:	0f 92       	push	r0
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	0f 92       	push	r0
    1148:	11 24       	eor	r1, r1
    114a:	2f 93       	push	r18
    114c:	3f 93       	push	r19
    114e:	4f 93       	push	r20
    1150:	5f 93       	push	r21
    1152:	6f 93       	push	r22
    1154:	7f 93       	push	r23
    1156:	8f 93       	push	r24
    1158:	9f 93       	push	r25
    115a:	af 93       	push	r26
    115c:	bf 93       	push	r27
    115e:	ef 93       	push	r30
    1160:	ff 93       	push	r31
    1162:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <Timer1_OCB_Fptr>
    1166:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <Timer1_OCB_Fptr+0x1>
    116a:	30 97       	sbiw	r30, 0x00	; 0
    116c:	09 f0       	breq	.+2      	; 0x1170 <__vector_8+0x30>
    116e:	09 95       	icall
    1170:	ff 91       	pop	r31
    1172:	ef 91       	pop	r30
    1174:	bf 91       	pop	r27
    1176:	af 91       	pop	r26
    1178:	9f 91       	pop	r25
    117a:	8f 91       	pop	r24
    117c:	7f 91       	pop	r23
    117e:	6f 91       	pop	r22
    1180:	5f 91       	pop	r21
    1182:	4f 91       	pop	r20
    1184:	3f 91       	pop	r19
    1186:	2f 91       	pop	r18
    1188:	0f 90       	pop	r0
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	0f 90       	pop	r0
    118e:	1f 90       	pop	r1
    1190:	18 95       	reti

00001192 <__vector_6>:
    1192:	1f 92       	push	r1
    1194:	0f 92       	push	r0
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	0f 92       	push	r0
    119a:	11 24       	eor	r1, r1
    119c:	2f 93       	push	r18
    119e:	3f 93       	push	r19
    11a0:	4f 93       	push	r20
    11a2:	5f 93       	push	r21
    11a4:	6f 93       	push	r22
    11a6:	7f 93       	push	r23
    11a8:	8f 93       	push	r24
    11aa:	9f 93       	push	r25
    11ac:	af 93       	push	r26
    11ae:	bf 93       	push	r27
    11b0:	ef 93       	push	r30
    11b2:	ff 93       	push	r31
    11b4:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <Timer1_ICU_Fptr>
    11b8:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <Timer1_ICU_Fptr+0x1>
    11bc:	30 97       	sbiw	r30, 0x00	; 0
    11be:	09 f0       	breq	.+2      	; 0x11c2 <__vector_6+0x30>
    11c0:	09 95       	icall
    11c2:	ff 91       	pop	r31
    11c4:	ef 91       	pop	r30
    11c6:	bf 91       	pop	r27
    11c8:	af 91       	pop	r26
    11ca:	9f 91       	pop	r25
    11cc:	8f 91       	pop	r24
    11ce:	7f 91       	pop	r23
    11d0:	6f 91       	pop	r22
    11d2:	5f 91       	pop	r21
    11d4:	4f 91       	pop	r20
    11d6:	3f 91       	pop	r19
    11d8:	2f 91       	pop	r18
    11da:	0f 90       	pop	r0
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	0f 90       	pop	r0
    11e0:	1f 90       	pop	r1
    11e2:	18 95       	reti

000011e4 <__vector_5>:
}



ISR(TIMER2_OVF_vect)
{
    11e4:	1f 92       	push	r1
    11e6:	0f 92       	push	r0
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	0f 92       	push	r0
    11ec:	11 24       	eor	r1, r1
    11ee:	2f 93       	push	r18
    11f0:	3f 93       	push	r19
    11f2:	4f 93       	push	r20
    11f4:	5f 93       	push	r21
    11f6:	6f 93       	push	r22
    11f8:	7f 93       	push	r23
    11fa:	8f 93       	push	r24
    11fc:	9f 93       	push	r25
    11fe:	af 93       	push	r26
    1200:	bf 93       	push	r27
    1202:	ef 93       	push	r30
    1204:	ff 93       	push	r31
	if(Timer2_OVF_Fptr!=NULLPTR)
    1206:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <Timer2_OVF_Fptr>
    120a:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <Timer2_OVF_Fptr+0x1>
    120e:	30 97       	sbiw	r30, 0x00	; 0
    1210:	09 f0       	breq	.+2      	; 0x1214 <__vector_5+0x30>
	{
		Timer2_OVF_Fptr();
    1212:	09 95       	icall
	}
}
    1214:	ff 91       	pop	r31
    1216:	ef 91       	pop	r30
    1218:	bf 91       	pop	r27
    121a:	af 91       	pop	r26
    121c:	9f 91       	pop	r25
    121e:	8f 91       	pop	r24
    1220:	7f 91       	pop	r23
    1222:	6f 91       	pop	r22
    1224:	5f 91       	pop	r21
    1226:	4f 91       	pop	r20
    1228:	3f 91       	pop	r19
    122a:	2f 91       	pop	r18
    122c:	0f 90       	pop	r0
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	0f 90       	pop	r0
    1232:	1f 90       	pop	r1
    1234:	18 95       	reti

00001236 <__vector_4>:

ISR(TIMER2_OC_vect)
{
    1236:	1f 92       	push	r1
    1238:	0f 92       	push	r0
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	0f 92       	push	r0
    123e:	11 24       	eor	r1, r1
    1240:	2f 93       	push	r18
    1242:	3f 93       	push	r19
    1244:	4f 93       	push	r20
    1246:	5f 93       	push	r21
    1248:	6f 93       	push	r22
    124a:	7f 93       	push	r23
    124c:	8f 93       	push	r24
    124e:	9f 93       	push	r25
    1250:	af 93       	push	r26
    1252:	bf 93       	push	r27
    1254:	ef 93       	push	r30
    1256:	ff 93       	push	r31
	if(Timer2_OC_Fptr!=NULLPTR)
    1258:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Timer2_OC_Fptr>
    125c:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Timer2_OC_Fptr+0x1>
    1260:	30 97       	sbiw	r30, 0x00	; 0
    1262:	09 f0       	breq	.+2      	; 0x1266 <__vector_4+0x30>
	{
		Timer2_OC_Fptr();
    1264:	09 95       	icall
	}
}
    1266:	ff 91       	pop	r31
    1268:	ef 91       	pop	r30
    126a:	bf 91       	pop	r27
    126c:	af 91       	pop	r26
    126e:	9f 91       	pop	r25
    1270:	8f 91       	pop	r24
    1272:	7f 91       	pop	r23
    1274:	6f 91       	pop	r22
    1276:	5f 91       	pop	r21
    1278:	4f 91       	pop	r20
    127a:	3f 91       	pop	r19
    127c:	2f 91       	pop	r18
    127e:	0f 90       	pop	r0
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	0f 90       	pop	r0
    1284:	1f 90       	pop	r1
    1286:	18 95       	reti

00001288 <__vector_13>:
	UART_TX_Fptr = LocalFptr;
}


ISR(UART_RX_vect)
{
    1288:	1f 92       	push	r1
    128a:	0f 92       	push	r0
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	0f 92       	push	r0
    1290:	11 24       	eor	r1, r1
    1292:	2f 93       	push	r18
    1294:	3f 93       	push	r19
    1296:	4f 93       	push	r20
    1298:	5f 93       	push	r21
    129a:	6f 93       	push	r22
    129c:	7f 93       	push	r23
    129e:	8f 93       	push	r24
    12a0:	9f 93       	push	r25
    12a2:	af 93       	push	r26
    12a4:	bf 93       	push	r27
    12a6:	ef 93       	push	r30
    12a8:	ff 93       	push	r31
	if (UART_RX_Fptr!=NULLPTR)
    12aa:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <UART_RX_Fptr>
    12ae:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <UART_RX_Fptr+0x1>
    12b2:	30 97       	sbiw	r30, 0x00	; 0
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <__vector_13+0x30>
	{
		UART_RX_Fptr();
    12b6:	09 95       	icall
	}
}
    12b8:	ff 91       	pop	r31
    12ba:	ef 91       	pop	r30
    12bc:	bf 91       	pop	r27
    12be:	af 91       	pop	r26
    12c0:	9f 91       	pop	r25
    12c2:	8f 91       	pop	r24
    12c4:	7f 91       	pop	r23
    12c6:	6f 91       	pop	r22
    12c8:	5f 91       	pop	r21
    12ca:	4f 91       	pop	r20
    12cc:	3f 91       	pop	r19
    12ce:	2f 91       	pop	r18
    12d0:	0f 90       	pop	r0
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	0f 90       	pop	r0
    12d6:	1f 90       	pop	r1
    12d8:	18 95       	reti

000012da <__vector_15>:

ISR(UART_TX_vect)
{
    12da:	1f 92       	push	r1
    12dc:	0f 92       	push	r0
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	0f 92       	push	r0
    12e2:	11 24       	eor	r1, r1
    12e4:	2f 93       	push	r18
    12e6:	3f 93       	push	r19
    12e8:	4f 93       	push	r20
    12ea:	5f 93       	push	r21
    12ec:	6f 93       	push	r22
    12ee:	7f 93       	push	r23
    12f0:	8f 93       	push	r24
    12f2:	9f 93       	push	r25
    12f4:	af 93       	push	r26
    12f6:	bf 93       	push	r27
    12f8:	ef 93       	push	r30
    12fa:	ff 93       	push	r31
	if (UART_TX_Fptr!=NULLPTR)
    12fc:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <UART_TX_Fptr>
    1300:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <UART_TX_Fptr+0x1>
    1304:	30 97       	sbiw	r30, 0x00	; 0
    1306:	09 f0       	breq	.+2      	; 0x130a <__vector_15+0x30>
	{
		UART_TX_Fptr();
    1308:	09 95       	icall
	}
}
    130a:	ff 91       	pop	r31
    130c:	ef 91       	pop	r30
    130e:	bf 91       	pop	r27
    1310:	af 91       	pop	r26
    1312:	9f 91       	pop	r25
    1314:	8f 91       	pop	r24
    1316:	7f 91       	pop	r23
    1318:	6f 91       	pop	r22
    131a:	5f 91       	pop	r21
    131c:	4f 91       	pop	r20
    131e:	3f 91       	pop	r19
    1320:	2f 91       	pop	r18
    1322:	0f 90       	pop	r0
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	0f 90       	pop	r0
    1328:	1f 90       	pop	r1
    132a:	18 95       	reti

0000132c <__udivmodsi4>:
    132c:	a1 e2       	ldi	r26, 0x21	; 33
    132e:	1a 2e       	mov	r1, r26
    1330:	aa 1b       	sub	r26, r26
    1332:	bb 1b       	sub	r27, r27
    1334:	fd 01       	movw	r30, r26
    1336:	0d c0       	rjmp	.+26     	; 0x1352 <__udivmodsi4_ep>

00001338 <__udivmodsi4_loop>:
    1338:	aa 1f       	adc	r26, r26
    133a:	bb 1f       	adc	r27, r27
    133c:	ee 1f       	adc	r30, r30
    133e:	ff 1f       	adc	r31, r31
    1340:	a2 17       	cp	r26, r18
    1342:	b3 07       	cpc	r27, r19
    1344:	e4 07       	cpc	r30, r20
    1346:	f5 07       	cpc	r31, r21
    1348:	20 f0       	brcs	.+8      	; 0x1352 <__udivmodsi4_ep>
    134a:	a2 1b       	sub	r26, r18
    134c:	b3 0b       	sbc	r27, r19
    134e:	e4 0b       	sbc	r30, r20
    1350:	f5 0b       	sbc	r31, r21

00001352 <__udivmodsi4_ep>:
    1352:	66 1f       	adc	r22, r22
    1354:	77 1f       	adc	r23, r23
    1356:	88 1f       	adc	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	1a 94       	dec	r1
    135c:	69 f7       	brne	.-38     	; 0x1338 <__udivmodsi4_loop>
    135e:	60 95       	com	r22
    1360:	70 95       	com	r23
    1362:	80 95       	com	r24
    1364:	90 95       	com	r25
    1366:	9b 01       	movw	r18, r22
    1368:	ac 01       	movw	r20, r24
    136a:	bd 01       	movw	r22, r26
    136c:	cf 01       	movw	r24, r30
    136e:	08 95       	ret

00001370 <__tablejump2__>:
    1370:	ee 0f       	add	r30, r30
    1372:	ff 1f       	adc	r31, r31
    1374:	05 90       	lpm	r0, Z+
    1376:	f4 91       	lpm	r31, Z
    1378:	e0 2d       	mov	r30, r0
    137a:	09 94       	ijmp

0000137c <_exit>:
    137c:	f8 94       	cli

0000137e <__stop_program>:
    137e:	ff cf       	rjmp	.-2      	; 0x137e <__stop_program>
